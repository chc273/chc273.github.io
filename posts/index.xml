<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Chi&#39;s blog</title>
    <link>https://chc273.github.io/posts/</link>
    <description>Recent content in Posts on Chi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://chc273.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a 1D Density Functional Theory Code in Python</title>
      <link>https://chc273.github.io/posts/2022-02-02-density-functional-theory-1/</link>
      <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://chc273.github.io/posts/2022-02-02-density-functional-theory-1/</guid>
      <description>Introduction to 1D Density Functional Theory Density Functional Theory (DFT) is a powerful computational method used in quantum chemistry and solid-state physics to investigate the electronic structure of many-body systems. While real-world applications of DFT often deal with three-dimensional systems, exploring DFT in one dimension provides an excellent starting point for understanding the fundamental concepts and implementation details.
In this blog post, we&amp;rsquo;ll walk through the process of building a 1D DFT code using Python.</description>
      <content:encoded><![CDATA[<h2 id="introduction-to-1d-density-functional-theory">Introduction to 1D Density Functional Theory</h2>
<p>Density Functional Theory (DFT) is a powerful computational method used in quantum chemistry and solid-state physics to investigate the electronic structure of many-body systems. While real-world applications of DFT often deal with three-dimensional systems, exploring DFT in one dimension provides an excellent starting point for understanding the fundamental concepts and implementation details.</p>
<p>In this blog post, we&rsquo;ll walk through the process of building a 1D DFT code using Python. We&rsquo;ll focus on a simple system - a particle in a box - to illustrate the key components of DFT calculations.</p>
<h2 id="theoretical-background">Theoretical Background</h2>
<p>Before diving into the code, let&rsquo;s briefly review the theoretical foundations of DFT in the context of a 1D system.</p>
<p>The core idea of DFT is that the ground state properties of a many-electron system can be determined using the electron density $n(x)$, rather than the many-body wavefunction. This is based on the Hohenberg-Kohn theorems, which state that:</p>
<ol>
<li>The external potential, and hence the total energy, is a unique functional of the electron density.</li>
<li>The ground state energy can be obtained variationally: the density that minimizes the total energy is the exact ground state density.</li>
</ol>
<p>In the Kohn-Sham formulation of DFT, we map the interacting system onto a fictitious system of non-interacting particles that generate the same density. The Kohn-Sham equations for a 1D system are:</p>
<p>$$
\left[-\frac{1}{2}\frac{d^2}{dx^2} + v_{eff}(x)\right]\phi_i(x) = \epsilon_i\phi_i(x)
$$</p>
<p>where $\phi_i(x)$ are the Kohn-Sham orbitals, $\epsilon_i$ are their energies, and $v_{eff}(x)$ is the effective potential:</p>
<p>$$
v_{eff}(x) = v_{ext}(x) + v_H(x) + v_{xc}(x)
$$</p>
<p>Here, $v_{ext}(x)$ is the external potential, $v_H(x)$ is the Hartree potential, and $v_{xc}(x)$ is the exchange-correlation potential.</p>
<h2 id="implementation-overview">Implementation Overview</h2>
<p>Our 1D DFT code will consist of several key components:</p>
<ol>
<li>Basis set definition</li>
<li>Hamiltonian construction</li>
<li>Density calculation</li>
<li>Potential calculation</li>
<li>Self-consistent field (SCF) loop</li>
</ol>
<p>We&rsquo;ll implement these components step by step, explaining the purpose and functionality of each part.</p>
<h2 id="setting-up-the-environment">Setting Up the Environment</h2>
<p>First, let&rsquo;s import the necessary Python libraries:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">run</span> <span class="n">jupyter_image_saver</span><span class="o">.</span><span class="n">py</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">linalg</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="basis-set-definition">Basis Set Definition</h2>
<p>For our 1D DFT code, we&rsquo;ll use a simple basis set of sine functions, which are eigenfunctions of the particle in a box:</p>
<p>$$
\chi_n(x) = \sqrt{\frac{2}{L}} \sin\left(\frac{n\pi x}{L}\right)
$$</p>
<p>where $L$ is the box length and $n$ is the basis function index.</p>
<p>The Kohn-Sham orbital $\phi_i$ is expressed as</p>
<p>$$
\phi_i(x) = \sum_n c_{in}\chi_n(x)
$$</p>
<p>Let&rsquo;s implement this basis set:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span><span class="lnt" id="hl-2-20"><a class="lnlinks" href="#hl-2-20">20</a>
</span><span class="lnt" id="hl-2-21"><a class="lnlinks" href="#hl-2-21">21</a>
</span><span class="lnt" id="hl-2-22"><a class="lnlinks" href="#hl-2-22">22</a>
</span><span class="lnt" id="hl-2-23"><a class="lnlinks" href="#hl-2-23">23</a>
</span><span class="lnt" id="hl-2-24"><a class="lnlinks" href="#hl-2-24">24</a>
</span><span class="lnt" id="hl-2-25"><a class="lnlinks" href="#hl-2-25">25</a>
</span><span class="lnt" id="hl-2-26"><a class="lnlinks" href="#hl-2-26">26</a>
</span><span class="lnt" id="hl-2-27"><a class="lnlinks" href="#hl-2-27">27</a>
</span><span class="lnt" id="hl-2-28"><a class="lnlinks" href="#hl-2-28">28</a>
</span><span class="lnt" id="hl-2-29"><a class="lnlinks" href="#hl-2-29">29</a>
</span><span class="lnt" id="hl-2-30"><a class="lnlinks" href="#hl-2-30">30</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">basis_function</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">L</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Compute the nth basis function for a particle in a box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        n (int): Basis function index (quantum number).
</span></span></span><span class="line"><span class="cl"><span class="s2">        L (float): Length of the box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Values of the nth basis function at the given grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="n">L</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">x</span> <span class="o">/</span> <span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_basis_set</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">L</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Create a set of basis functions for a particle in a box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions to generate.
</span></span></span><span class="line"><span class="cl"><span class="s2">        L (float): Length of the box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: 2D array where each column is a basis function evaluated at the grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basis_set</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">num_basis_functions</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_basis_functions</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">basis_set</span><span class="p">[:,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">basis_function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">basis_set</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="hamiltonian-construction">Hamiltonian Construction</h2>
<p>The next step is to construct the Hamiltonian matrix. In the basis of sine functions, the kinetic energy term is diagonal:</p>
<p>$$
T_{mn} = -\frac{1}{2}\int_0^L \chi_m(x)\frac{d^2}{dx^2} \chi_n(x)dx = \frac{n^2\pi^2}{2L^2}\delta_{mn}
$$</p>
<p>The potential energy term needs to be integrated numerically:</p>
<p>$$
V_{mn} = \int_0^L \chi_m(x) v_{eff}(x) \chi_n(x) dx
$$</p>
<p>Let&rsquo;s implement the Hamiltonian construction:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span><span class="lnt" id="hl-3-23"><a class="lnlinks" href="#hl-3-23">23</a>
</span><span class="lnt" id="hl-3-24"><a class="lnlinks" href="#hl-3-24">24</a>
</span><span class="lnt" id="hl-3-25"><a class="lnlinks" href="#hl-3-25">25</a>
</span><span class="lnt" id="hl-3-26"><a class="lnlinks" href="#hl-3-26">26</a>
</span><span class="lnt" id="hl-3-27"><a class="lnlinks" href="#hl-3-27">27</a>
</span><span class="lnt" id="hl-3-28"><a class="lnlinks" href="#hl-3-28">28</a>
</span><span class="lnt" id="hl-3-29"><a class="lnlinks" href="#hl-3-29">29</a>
</span><span class="lnt" id="hl-3-30"><a class="lnlinks" href="#hl-3-30">30</a>
</span><span class="lnt" id="hl-3-31"><a class="lnlinks" href="#hl-3-31">31</a>
</span><span class="lnt" id="hl-3-32"><a class="lnlinks" href="#hl-3-32">32</a>
</span><span class="lnt" id="hl-3-33"><a class="lnlinks" href="#hl-3-33">33</a>
</span><span class="lnt" id="hl-3-34"><a class="lnlinks" href="#hl-3-34">34</a>
</span><span class="lnt" id="hl-3-35"><a class="lnlinks" href="#hl-3-35">35</a>
</span><span class="lnt" id="hl-3-36"><a class="lnlinks" href="#hl-3-36">36</a>
</span><span class="lnt" id="hl-3-37"><a class="lnlinks" href="#hl-3-37">37</a>
</span><span class="lnt" id="hl-3-38"><a class="lnlinks" href="#hl-3-38">38</a>
</span><span class="lnt" id="hl-3-39"><a class="lnlinks" href="#hl-3-39">39</a>
</span><span class="lnt" id="hl-3-40"><a class="lnlinks" href="#hl-3-40">40</a>
</span><span class="lnt" id="hl-3-41"><a class="lnlinks" href="#hl-3-41">41</a>
</span><span class="lnt" id="hl-3-42"><a class="lnlinks" href="#hl-3-42">42</a>
</span><span class="lnt" id="hl-3-43"><a class="lnlinks" href="#hl-3-43">43</a>
</span><span class="lnt" id="hl-3-44"><a class="lnlinks" href="#hl-3-44">44</a>
</span><span class="lnt" id="hl-3-45"><a class="lnlinks" href="#hl-3-45">45</a>
</span><span class="lnt" id="hl-3-46"><a class="lnlinks" href="#hl-3-46">46</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">kinetic_energy_matrix</span><span class="p">(</span><span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">L</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Construct the kinetic energy matrix for a particle in a box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions.
</span></span></span><span class="line"><span class="cl"><span class="s2">        L (float): Length of the box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Kinetic energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_basis_functions</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">L</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">T</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">potential_energy_matrix</span><span class="p">(</span><span class="n">basis_set</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Construct the potential energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        basis_set (np.ndarray): Set of basis functions evaluated at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        v_eff (np.ndarray): Effective potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Potential energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">basis_set</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">basis_set</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">basis_set</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">basis_set</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">            <span class="n">V</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">basis_set</span><span class="p">[:,</span> <span class="n">m</span><span class="p">]</span> <span class="o">*</span> <span class="n">v_eff</span> <span class="o">*</span> <span class="n">basis_set</span><span class="p">[:,</span> <span class="n">n</span><span class="p">],</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">V</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">construct_hamiltonian</span><span class="p">(</span><span class="n">T</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">V</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Construct the Hamiltonian matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        T (np.ndarray): Kinetic energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">        V (np.ndarray): Potential energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Hamiltonian matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">T</span> <span class="o">+</span> <span class="n">V</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="density-calculation">Density Calculation</h2>
<p>The electron density is a crucial quantity in DFT. For our 1D system, we can calculate it as:</p>
<p>$$
n(x) = \sum_i |\phi_i(x)|^2
$$</p>
<p>where $\phi_i(x)$ are the Kohn-Sham orbitals. In our basis set representation, we can express this as:</p>
<p>$$
n(x) = \sum_i \left|\sum_n c_{in} \chi_n(x)\right|^2
$$</p>
<p>where $c_{in}$ are the expansion coefficients of the Kohn-Sham orbitals in our basis.</p>
<p>Let&rsquo;s implement the density calculation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_density</span><span class="p">(</span><span class="n">coefficients</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">basis_set</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the electron density.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        coefficients (np.ndarray): Expansion coefficients of the Kohn-Sham orbitals.
</span></span></span><span class="line"><span class="cl"><span class="s2">        basis_set (np.ndarray): Set of basis functions evaluated at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_electrons (int): Number of electrons in the system.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">occupied_orbitals</span> <span class="o">=</span> <span class="n">coefficients</span><span class="p">[:,</span> <span class="p">:</span><span class="n">num_electrons</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">density</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">basis_set</span> <span class="o">@</span> <span class="n">occupied_orbitals</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">density</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="potential-calculation">Potential Calculation</h2>
<p>The effective potential in DFT consists of three terms: the external potential, the Hartree potential, and the exchange-correlation potential. For our 1D system, we&rsquo;ll use a simple external potential (e.g., a harmonic oscillator potential) and a local density approximation (LDA) for the exchange-correlation potential.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span><span class="lnt" id="hl-5-17"><a class="lnlinks" href="#hl-5-17">17</a>
</span><span class="lnt" id="hl-5-18"><a class="lnlinks" href="#hl-5-18">18</a>
</span><span class="lnt" id="hl-5-19"><a class="lnlinks" href="#hl-5-19">19</a>
</span><span class="lnt" id="hl-5-20"><a class="lnlinks" href="#hl-5-20">20</a>
</span><span class="lnt" id="hl-5-21"><a class="lnlinks" href="#hl-5-21">21</a>
</span><span class="lnt" id="hl-5-22"><a class="lnlinks" href="#hl-5-22">22</a>
</span><span class="lnt" id="hl-5-23"><a class="lnlinks" href="#hl-5-23">23</a>
</span><span class="lnt" id="hl-5-24"><a class="lnlinks" href="#hl-5-24">24</a>
</span><span class="lnt" id="hl-5-25"><a class="lnlinks" href="#hl-5-25">25</a>
</span><span class="lnt" id="hl-5-26"><a class="lnlinks" href="#hl-5-26">26</a>
</span><span class="lnt" id="hl-5-27"><a class="lnlinks" href="#hl-5-27">27</a>
</span><span class="lnt" id="hl-5-28"><a class="lnlinks" href="#hl-5-28">28</a>
</span><span class="lnt" id="hl-5-29"><a class="lnlinks" href="#hl-5-29">29</a>
</span><span class="lnt" id="hl-5-30"><a class="lnlinks" href="#hl-5-30">30</a>
</span><span class="lnt" id="hl-5-31"><a class="lnlinks" href="#hl-5-31">31</a>
</span><span class="lnt" id="hl-5-32"><a class="lnlinks" href="#hl-5-32">32</a>
</span><span class="lnt" id="hl-5-33"><a class="lnlinks" href="#hl-5-33">33</a>
</span><span class="lnt" id="hl-5-34"><a class="lnlinks" href="#hl-5-34">34</a>
</span><span class="lnt" id="hl-5-35"><a class="lnlinks" href="#hl-5-35">35</a>
</span><span class="lnt" id="hl-5-36"><a class="lnlinks" href="#hl-5-36">36</a>
</span><span class="lnt" id="hl-5-37"><a class="lnlinks" href="#hl-5-37">37</a>
</span><span class="lnt" id="hl-5-38"><a class="lnlinks" href="#hl-5-38">38</a>
</span><span class="lnt" id="hl-5-39"><a class="lnlinks" href="#hl-5-39">39</a>
</span><span class="lnt" id="hl-5-40"><a class="lnlinks" href="#hl-5-40">40</a>
</span><span class="lnt" id="hl-5-41"><a class="lnlinks" href="#hl-5-41">41</a>
</span><span class="lnt" id="hl-5-42"><a class="lnlinks" href="#hl-5-42">42</a>
</span><span class="lnt" id="hl-5-43"><a class="lnlinks" href="#hl-5-43">43</a>
</span><span class="lnt" id="hl-5-44"><a class="lnlinks" href="#hl-5-44">44</a>
</span><span class="lnt" id="hl-5-45"><a class="lnlinks" href="#hl-5-45">45</a>
</span><span class="lnt" id="hl-5-46"><a class="lnlinks" href="#hl-5-46">46</a>
</span><span class="lnt" id="hl-5-47"><a class="lnlinks" href="#hl-5-47">47</a>
</span><span class="lnt" id="hl-5-48"><a class="lnlinks" href="#hl-5-48">48</a>
</span><span class="lnt" id="hl-5-49"><a class="lnlinks" href="#hl-5-49">49</a>
</span><span class="lnt" id="hl-5-50"><a class="lnlinks" href="#hl-5-50">50</a>
</span><span class="lnt" id="hl-5-51"><a class="lnlinks" href="#hl-5-51">51</a>
</span><span class="lnt" id="hl-5-52"><a class="lnlinks" href="#hl-5-52">52</a>
</span><span class="lnt" id="hl-5-53"><a class="lnlinks" href="#hl-5-53">53</a>
</span><span class="lnt" id="hl-5-54"><a class="lnlinks" href="#hl-5-54">54</a>
</span><span class="lnt" id="hl-5-55"><a class="lnlinks" href="#hl-5-55">55</a>
</span><span class="lnt" id="hl-5-56"><a class="lnlinks" href="#hl-5-56">56</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">external_potential</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the external potential (harmonic oscillator).
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        k (float, optional): Spring constant. Defaults to 1.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: External potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">k</span> <span class="o">*</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hartree_potential</span><span class="p">(</span><span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the Hartree potential by solving Poisson&#39;s equation.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Hartree potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_H</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">density</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">v_H</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v_H</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">exchange_correlation_potential_lda</span><span class="p">(</span><span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the exchange-correlation potential using Local Density Approximation (LDA).
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Exchange-correlation potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="p">((</span><span class="mi">3</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span> <span class="o">*</span> <span class="n">density</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the effective potential for the Kohn-Sham equations.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Effective potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_ext</span> <span class="o">=</span> <span class="n">external_potential</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_H</span> <span class="o">=</span> <span class="n">hartree_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_xc</span> <span class="o">=</span> <span class="n">exchange_correlation_potential_lda</span><span class="p">(</span><span class="n">density</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v_ext</span> <span class="o">+</span> <span class="n">v_H</span> <span class="o">+</span> <span class="n">v_xc</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="self-consistent-field-loop">Self-Consistent Field Loop</h2>
<p>The heart of the DFT calculation is the self-consistent field (SCF) loop. We start with an initial guess for the density, calculate the effective potential, solve the Kohn-Sham equations, and then calculate a new density. We repeat this process until the density (or energy) converges.</p>
<p>Here&rsquo;s the implementation of the SCF loop:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span><span class="lnt" id="hl-6-21"><a class="lnlinks" href="#hl-6-21">21</a>
</span><span class="lnt" id="hl-6-22"><a class="lnlinks" href="#hl-6-22">22</a>
</span><span class="lnt" id="hl-6-23"><a class="lnlinks" href="#hl-6-23">23</a>
</span><span class="lnt" id="hl-6-24"><a class="lnlinks" href="#hl-6-24">24</a>
</span><span class="lnt" id="hl-6-25"><a class="lnlinks" href="#hl-6-25">25</a>
</span><span class="lnt" id="hl-6-26"><a class="lnlinks" href="#hl-6-26">26</a>
</span><span class="lnt" id="hl-6-27"><a class="lnlinks" href="#hl-6-27">27</a>
</span><span class="lnt" id="hl-6-28"><a class="lnlinks" href="#hl-6-28">28</a>
</span><span class="lnt" id="hl-6-29"><a class="lnlinks" href="#hl-6-29">29</a>
</span><span class="lnt" id="hl-6-30"><a class="lnlinks" href="#hl-6-30">30</a>
</span><span class="lnt" id="hl-6-31"><a class="lnlinks" href="#hl-6-31">31</a>
</span><span class="lnt" id="hl-6-32"><a class="lnlinks" href="#hl-6-32">32</a>
</span><span class="lnt" id="hl-6-33"><a class="lnlinks" href="#hl-6-33">33</a>
</span><span class="lnt" id="hl-6-34"><a class="lnlinks" href="#hl-6-34">34</a>
</span><span class="lnt" id="hl-6-35"><a class="lnlinks" href="#hl-6-35">35</a>
</span><span class="lnt" id="hl-6-36"><a class="lnlinks" href="#hl-6-36">36</a>
</span><span class="lnt" id="hl-6-37"><a class="lnlinks" href="#hl-6-37">37</a>
</span><span class="lnt" id="hl-6-38"><a class="lnlinks" href="#hl-6-38">38</a>
</span><span class="lnt" id="hl-6-39"><a class="lnlinks" href="#hl-6-39">39</a>
</span><span class="lnt" id="hl-6-40"><a class="lnlinks" href="#hl-6-40">40</a>
</span><span class="lnt" id="hl-6-41"><a class="lnlinks" href="#hl-6-41">41</a>
</span><span class="lnt" id="hl-6-42"><a class="lnlinks" href="#hl-6-42">42</a>
</span><span class="lnt" id="hl-6-43"><a class="lnlinks" href="#hl-6-43">43</a>
</span><span class="lnt" id="hl-6-44"><a class="lnlinks" href="#hl-6-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">scf_loop</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">             <span class="n">max_iterations</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">mixing_param</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">             <span class="n">convergence_threshold</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1e-6</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Perform the self-consistent field loop for DFT calculations.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_electrons (int): Number of electrons in the system.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions to use.
</span></span></span><span class="line"><span class="cl"><span class="s2">        max_iterations (int, optional): Maximum number of SCF iterations. Defaults to 100.
</span></span></span><span class="line"><span class="cl"><span class="s2">        mixing_param (float, optional): Mixing parameter for density update. Defaults to 0.5.
</span></span></span><span class="line"><span class="cl"><span class="s2">        convergence_threshold (float, optional): Convergence threshold for density. Defaults to 1e-6.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        tuple[np.ndarray, np.ndarray, np.ndarray]: Final density, eigenvalues, and eigenvectors.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">L</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">basis_set</span> <span class="o">=</span> <span class="n">create_basis_set</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">=</span> <span class="n">kinetic_energy_matrix</span><span class="p">(</span><span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Initial guess for density</span>
</span></span><span class="line"><span class="cl">    <span class="n">density</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">num_electrons</span> <span class="o">/</span> <span class="n">L</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">iteration</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iterations</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">v_eff</span> <span class="o">=</span> <span class="n">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">V</span> <span class="o">=</span> <span class="n">potential_energy_matrix</span><span class="p">(</span><span class="n">basis_set</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">H</span> <span class="o">=</span> <span class="n">construct_hamiltonian</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">V</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Solve the eigenvalue problem</span>
</span></span><span class="line"><span class="cl">        <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">linalg</span><span class="o">.</span><span class="n">eigh</span><span class="p">(</span><span class="n">H</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Calculate new density</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_density</span> <span class="o">=</span> <span class="n">calculate_density</span><span class="p">(</span><span class="n">eigenvectors</span><span class="p">,</span> <span class="n">basis_set</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Check for convergence</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">new_density</span> <span class="o">-</span> <span class="n">density</span><span class="p">))</span> <span class="o">&lt;</span> <span class="n">convergence_threshold</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Converged after </span><span class="si">{</span><span class="n">iteration</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s2"> iterations&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Mix old and new densities</span>
</span></span><span class="line"><span class="cl">        <span class="n">density</span> <span class="o">=</span> <span class="n">mixing_param</span> <span class="o">*</span> <span class="n">new_density</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">mixing_param</span><span class="p">)</span> <span class="o">*</span> <span class="n">density</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">density</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="putting-it-all-together">Putting It All Together</h2>
<p>Now that we have all the components, let&rsquo;s create a function to run the entire DFT calculation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1"> 1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2"> 2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3"> 3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4"> 4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5"> 5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6"> 6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7"> 7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8"> 8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9"> 9</a>
</span><span class="lnt" id="hl-7-10"><a class="lnlinks" href="#hl-7-10">10</a>
</span><span class="lnt" id="hl-7-11"><a class="lnlinks" href="#hl-7-11">11</a>
</span><span class="lnt" id="hl-7-12"><a class="lnlinks" href="#hl-7-12">12</a>
</span><span class="lnt" id="hl-7-13"><a class="lnlinks" href="#hl-7-13">13</a>
</span><span class="lnt" id="hl-7-14"><a class="lnlinks" href="#hl-7-14">14</a>
</span><span class="lnt" id="hl-7-15"><a class="lnlinks" href="#hl-7-15">15</a>
</span><span class="lnt" id="hl-7-16"><a class="lnlinks" href="#hl-7-16">16</a>
</span><span class="lnt" id="hl-7-17"><a class="lnlinks" href="#hl-7-17">17</a>
</span><span class="lnt" id="hl-7-18"><a class="lnlinks" href="#hl-7-18">18</a>
</span><span class="lnt" id="hl-7-19"><a class="lnlinks" href="#hl-7-19">19</a>
</span><span class="lnt" id="hl-7-20"><a class="lnlinks" href="#hl-7-20">20</a>
</span><span class="lnt" id="hl-7-21"><a class="lnlinks" href="#hl-7-21">21</a>
</span><span class="lnt" id="hl-7-22"><a class="lnlinks" href="#hl-7-22">22</a>
</span><span class="lnt" id="hl-7-23"><a class="lnlinks" href="#hl-7-23">23</a>
</span><span class="lnt" id="hl-7-24"><a class="lnlinks" href="#hl-7-24">24</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">run_dft_calculation</span><span class="p">(</span><span class="n">num_points</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Run a complete 1D DFT calculation.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_points (int, optional): Number of spatial grid points. Defaults to 1000.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_electrons (int, optional): Number of electrons in the system. Defaults to 2.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int, optional): Number of basis functions to use. Defaults to 10.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray]: 
</span></span></span><span class="line"><span class="cl"><span class="s2">            Spatial grid, final density, effective potential, eigenvalues, and eigenvectors.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">num_points</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">density</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">scf_loop</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Calculate final effective potential</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_eff</span> <span class="o">=</span> <span class="n">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run the calculation</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">run_dft_calculation</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="visualization">Visualization</h2>
<p>Finally, let&rsquo;s visualize our results:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span><span class="lnt" id="hl-8-22"><a class="lnlinks" href="#hl-8-22">22</a>
</span><span class="lnt" id="hl-8-23"><a class="lnlinks" href="#hl-8-23">23</a>
</span><span class="lnt" id="hl-8-24"><a class="lnlinks" href="#hl-8-24">24</a>
</span><span class="lnt" id="hl-8-25"><a class="lnlinks" href="#hl-8-25">25</a>
</span><span class="lnt" id="hl-8-26"><a class="lnlinks" href="#hl-8-26">26</a>
</span><span class="lnt" id="hl-8-27"><a class="lnlinks" href="#hl-8-27">27</a>
</span><span class="lnt" id="hl-8-28"><a class="lnlinks" href="#hl-8-28">28</a>
</span><span class="lnt" id="hl-8-29"><a class="lnlinks" href="#hl-8-29">29</a>
</span><span class="lnt" id="hl-8-30"><a class="lnlinks" href="#hl-8-30">30</a>
</span><span class="lnt" id="hl-8-31"><a class="lnlinks" href="#hl-8-31">31</a>
</span><span class="lnt" id="hl-8-32"><a class="lnlinks" href="#hl-8-32">32</a>
</span><span class="lnt" id="hl-8-33"><a class="lnlinks" href="#hl-8-33">33</a>
</span><span class="lnt" id="hl-8-34"><a class="lnlinks" href="#hl-8-34">34</a>
</span><span class="lnt" id="hl-8-35"><a class="lnlinks" href="#hl-8-35">35</a>
</span><span class="lnt" id="hl-8-36"><a class="lnlinks" href="#hl-8-36">36</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">visualize_results</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                      <span class="n">eigenvectors</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Visualize the results of the DFT calculation.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        v_eff (np.ndarray): Effective potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        eigenvectors (np.ndarray): Eigenvectors (Kohn-Sham orbitals).
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions used.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Electron density&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Effective potential&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;1D DFT Results&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Density / Potential&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">basis_set</span> <span class="o">=</span> <span class="n">create_basis_set</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>  <span class="c1"># Plot first 3 orbitals</span>
</span></span><span class="line"><span class="cl">        <span class="n">orbital</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">eigenvectors</span><span class="p">[:,</span> <span class="n">i</span><span class="p">][</span><span class="kc">None</span><span class="p">,</span> <span class="p">:]</span> <span class="o">*</span> <span class="n">basis_set</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">orbital</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="s1">&#39;Orbital </span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Position&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Orbital amplitude&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Visualize the results</span>
</span></span><span class="line"><span class="cl"><span class="c1"># visualize_results(x, density, v_eff, eigenvectors, num_basis_functions=10)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This visualization function creates a figure with two subplots:</p>
<ol>
<li>The first subplot shows the electron density and the effective potential.</li>
<li>The second subplot displays the first three Kohn-Sham orbitals.</li>
<li></li>
</ol>
<h2 id="modeling-h-with-1d-dft">Modeling H₂ with 1D DFT</h2>
<p>While our 1D DFT code is a simplification, we can adapt it to model a simple diatomic molecule like H₂. Here&rsquo;s how we could approach this:</p>
<h3 id="adapting-the-external-potential">Adapting the External Potential</h3>
<p>Instead of a harmonic oscillator potential, we need to represent two protons at fixed positions. In 1D, we can model this as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">external_potential_H2</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">R</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    External potential for H₂ molecule in 1D.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        R (float): Distance between nuclei.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: External potential at each grid point.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">center</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="mf">1e-5</span>  <span class="c1"># to avoid numeric issues</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_ext</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">center</span> <span class="o">-</span> <span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">a</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">center</span> <span class="o">+</span> <span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v_ext</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here, <code>R</code> is the distance between the nuclei, and <code>a</code> is a small positive number to avoid division by zero. The potential is centered in our box.</p>
<h3 id="adjusting-the-number-of-electrons">Adjusting the Number of Electrons</h3>
<p>H₂ has two electrons, so we set <code>num_electrons = 2</code> in our <code>run_dft_calculation</code> function.</p>
<h3 id="calculating-the-total-energy">Calculating the Total Energy</h3>
<p>To find the equilibrium bond length, we need to calculate the total energy, including the nuclear repulsion:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1"> 1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2"> 2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3"> 3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4"> 4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5"> 5</a>
</span><span class="lnt" id="hl-10-6"><a class="lnlinks" href="#hl-10-6"> 6</a>
</span><span class="lnt" id="hl-10-7"><a class="lnlinks" href="#hl-10-7"> 7</a>
</span><span class="lnt" id="hl-10-8"><a class="lnlinks" href="#hl-10-8"> 8</a>
</span><span class="lnt" id="hl-10-9"><a class="lnlinks" href="#hl-10-9"> 9</a>
</span><span class="lnt" id="hl-10-10"><a class="lnlinks" href="#hl-10-10">10</a>
</span><span class="lnt" id="hl-10-11"><a class="lnlinks" href="#hl-10-11">11</a>
</span><span class="lnt" id="hl-10-12"><a class="lnlinks" href="#hl-10-12">12</a>
</span><span class="lnt" id="hl-10-13"><a class="lnlinks" href="#hl-10-13">13</a>
</span><span class="lnt" id="hl-10-14"><a class="lnlinks" href="#hl-10-14">14</a>
</span><span class="lnt" id="hl-10-15"><a class="lnlinks" href="#hl-10-15">15</a>
</span><span class="lnt" id="hl-10-16"><a class="lnlinks" href="#hl-10-16">16</a>
</span><span class="lnt" id="hl-10-17"><a class="lnlinks" href="#hl-10-17">17</a>
</span><span class="lnt" id="hl-10-18"><a class="lnlinks" href="#hl-10-18">18</a>
</span><span class="lnt" id="hl-10-19"><a class="lnlinks" href="#hl-10-19">19</a>
</span><span class="lnt" id="hl-10-20"><a class="lnlinks" href="#hl-10-20">20</a>
</span><span class="lnt" id="hl-10-21"><a class="lnlinks" href="#hl-10-21">21</a>
</span><span class="lnt" id="hl-10-22"><a class="lnlinks" href="#hl-10-22">22</a>
</span><span class="lnt" id="hl-10-23"><a class="lnlinks" href="#hl-10-23">23</a>
</span><span class="lnt" id="hl-10-24"><a class="lnlinks" href="#hl-10-24">24</a>
</span><span class="lnt" id="hl-10-25"><a class="lnlinks" href="#hl-10-25">25</a>
</span><span class="lnt" id="hl-10-26"><a class="lnlinks" href="#hl-10-26">26</a>
</span><span class="lnt" id="hl-10-27"><a class="lnlinks" href="#hl-10-27">27</a>
</span><span class="lnt" id="hl-10-28"><a class="lnlinks" href="#hl-10-28">28</a>
</span><span class="lnt" id="hl-10-29"><a class="lnlinks" href="#hl-10-29">29</a>
</span><span class="lnt" id="hl-10-30"><a class="lnlinks" href="#hl-10-30">30</a>
</span><span class="lnt" id="hl-10-31"><a class="lnlinks" href="#hl-10-31">31</a>
</span><span class="lnt" id="hl-10-32"><a class="lnlinks" href="#hl-10-32">32</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_total_energy</span><span class="p">(</span><span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">v_ext</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                           <span class="n">eigenvalues</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">R</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the total energy of the H₂ system.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density.
</span></span></span><span class="line"><span class="cl"><span class="s2">        v_ext (np.ndarray): External potential.
</span></span></span><span class="line"><span class="cl"><span class="s2">        v_eff (np.ndarray): Effective potential.
</span></span></span><span class="line"><span class="cl"><span class="s2">        eigenvalues (np.ndarray): Kohn-Sham orbital energies.
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        R (float): Distance between nuclei.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        float: Total energy of the system.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Kinetic energy</span>
</span></span><span class="line"><span class="cl">    <span class="n">T_s</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">eigenvalues</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>  <span class="c1"># Sum of occupied orbital energies</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Electron-nuclear attraction</span>
</span></span><span class="line"><span class="cl">    <span class="n">E_en</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">density</span> <span class="o">*</span> <span class="n">v_ext</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Hartree energy</span>
</span></span><span class="line"><span class="cl">    <span class="n">E_H</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">density</span> <span class="o">*</span> <span class="p">(</span><span class="n">v_eff</span> <span class="o">-</span> <span class="n">v_ext</span> <span class="o">-</span> <span class="n">exchange_correlation_potential_lda</span><span class="p">(</span><span class="n">density</span><span class="p">)),</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Exchange-correlation energy</span>
</span></span><span class="line"><span class="cl">    <span class="n">E_xc</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">density</span> <span class="o">*</span> <span class="n">exchange_correlation_potential_lda</span><span class="p">(</span><span class="n">density</span><span class="p">),</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Nuclear repulsion</span>
</span></span><span class="line"><span class="cl">    <span class="n">E_nn</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">R</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">T_s</span> <span class="o">+</span> <span class="n">E_en</span> <span class="o">+</span> <span class="n">E_H</span> <span class="o">+</span> <span class="n">E_xc</span> <span class="o">+</span> <span class="n">E_nn</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="finding-the-equilibrium-bond-length">Finding the Equilibrium Bond Length</h3>
<p>We can find the equilibrium bond length by running our DFT calculation for different R values and finding the minimum energy:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1"> 1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2"> 2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3"> 3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4"> 4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5"> 5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6"> 6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7"> 7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8"> 8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9"> 9</a>
</span><span class="lnt" id="hl-11-10"><a class="lnlinks" href="#hl-11-10">10</a>
</span><span class="lnt" id="hl-11-11"><a class="lnlinks" href="#hl-11-11">11</a>
</span><span class="lnt" id="hl-11-12"><a class="lnlinks" href="#hl-11-12">12</a>
</span><span class="lnt" id="hl-11-13"><a class="lnlinks" href="#hl-11-13">13</a>
</span><span class="lnt" id="hl-11-14"><a class="lnlinks" href="#hl-11-14">14</a>
</span><span class="lnt" id="hl-11-15"><a class="lnlinks" href="#hl-11-15">15</a>
</span><span class="lnt" id="hl-11-16"><a class="lnlinks" href="#hl-11-16">16</a>
</span><span class="lnt" id="hl-11-17"><a class="lnlinks" href="#hl-11-17">17</a>
</span><span class="lnt" id="hl-11-18"><a class="lnlinks" href="#hl-11-18">18</a>
</span><span class="lnt" id="hl-11-19"><a class="lnlinks" href="#hl-11-19">19</a>
</span><span class="lnt" id="hl-11-20"><a class="lnlinks" href="#hl-11-20">20</a>
</span><span class="lnt" id="hl-11-21"><a class="lnlinks" href="#hl-11-21">21</a>
</span><span class="lnt" id="hl-11-22"><a class="lnlinks" href="#hl-11-22">22</a>
</span><span class="lnt" id="hl-11-23"><a class="lnlinks" href="#hl-11-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">find_equilibrium_bond_length</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Find the equilibrium bond length for H₂.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions to use.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        float: Equilibrium bond length.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">R_values</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>  <span class="c1"># in atomic units</span>
</span></span><span class="line"><span class="cl">    <span class="n">energies</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">R</span> <span class="ow">in</span> <span class="n">R_values</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">v_ext</span> <span class="o">=</span> <span class="n">external_potential_H2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">density</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">scf_loop</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">v_ext</span><span class="o">=</span><span class="n">v_ext</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">v_eff</span> <span class="o">=</span> <span class="n">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">energy</span> <span class="o">=</span> <span class="n">calculate_total_energy</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">v_ext</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">energies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">energy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">equilibrium_R</span> <span class="o">=</span> <span class="n">R_values</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">argmin</span><span class="p">(</span><span class="n">energies</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">equilibrium_R</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="running-the-calculation">Running the Calculation</h3>
<p>Finally, we can run our calculation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1"> 1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2"> 2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3"> 3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4"> 4</a>
</span><span class="lnt" id="hl-12-5"><a class="lnlinks" href="#hl-12-5"> 5</a>
</span><span class="lnt" id="hl-12-6"><a class="lnlinks" href="#hl-12-6"> 6</a>
</span><span class="lnt" id="hl-12-7"><a class="lnlinks" href="#hl-12-7"> 7</a>
</span><span class="lnt" id="hl-12-8"><a class="lnlinks" href="#hl-12-8"> 8</a>
</span><span class="lnt" id="hl-12-9"><a class="lnlinks" href="#hl-12-9"> 9</a>
</span><span class="lnt" id="hl-12-10"><a class="lnlinks" href="#hl-12-10">10</a>
</span><span class="lnt" id="hl-12-11"><a class="lnlinks" href="#hl-12-11">11</a>
</span><span class="lnt" id="hl-12-12"><a class="lnlinks" href="#hl-12-12">12</a>
</span><span class="lnt" id="hl-12-13"><a class="lnlinks" href="#hl-12-13">13</a>
</span><span class="lnt" id="hl-12-14"><a class="lnlinks" href="#hl-12-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">num_basis_functions</span> <span class="o">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="n">equilibrium_R</span> <span class="o">=</span> <span class="n">find_equilibrium_bond_length</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Equilibrium bond length: </span><span class="si">{</span><span class="n">equilibrium_R</span><span class="si">:</span><span class="s2">.3f</span><span class="si">}</span><span class="s2"> atomic units&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run DFT at equilibrium bond length</span>
</span></span><span class="line"><span class="cl"><span class="n">v_ext</span> <span class="o">=</span> <span class="n">external_potential_H2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">equilibrium_R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">density</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">scf_loop</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">v_ext</span><span class="o">=</span><span class="n">v_ext</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">v_eff</span> <span class="o">=</span> <span class="n">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">energy</span> <span class="o">=</span> <span class="n">calculate_total_energy</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">v_ext</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">equilibrium_R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Total energy at equilibrium: </span><span class="si">{</span><span class="n">energy</span><span class="si">:</span><span class="s2">.6f</span><span class="si">}</span><span class="s2"> atomic units&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Visualize results</span>
</span></span><span class="line"><span class="cl"><span class="n">visualize_results</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvectors</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="conclusion">Conclusion</h3>
<p>In this blog post, we&rsquo;ve implemented a basic 1D Density Functional Theory code in Python. We&rsquo;ve covered the key components of DFT, including:</p>
<ol>
<li>Basis set definition using particle-in-a-box eigenfunctions</li>
<li>Hamiltonian construction with kinetic and potential energy terms</li>
<li>Density calculation from Kohn-Sham orbitals</li>
<li>Effective potential calculation, including external, Hartree, and exchange-correlation potentials</li>
<li>Self-consistent field loop for iterative solution of the Kohn-Sham equations</li>
<li>Visualization of results</li>
</ol>
<p>This implementation serves as a starting point for understanding DFT calculations. In real-world applications, more sophisticated basis sets, exchange-correlation functionals, and numerical techniques would be used to handle more complex systems and achieve better accuracy and efficiency.</p>
<p>Some potential improvements and extensions to this code could include:</p>
<ol>
<li>Implementing more advanced exchange-correlation functionals (e.g., GGA)</li>
<li>Adding support for different external potentials</li>
<li>Improving the efficiency of the SCF loop (e.g., using DIIS convergence acceleration)</li>
<li>Calculating and visualizing additional properties (e.g., total energy, HOMO-LUMO gap)</li>
<li>Extending the code to handle multiple non-interacting particles</li>
</ol>
<p>By working through this implementation, you&rsquo;ve gained insight into the fundamental principles of DFT and how they can be translated into code. This knowledge forms a solid foundation for understanding more complex DFT implementations and their applications in computational chemistry and materials science.</p>
<h2 id="further-reading">Further Reading</h2>
<p>To deepen your understanding of DFT and its applications, you might want to explore the following resources:</p>
<ol>
<li>&ldquo;Density Functional Theory: A Practical Introduction&rdquo; by David Sholl and Janice A. Steckel</li>
<li>&ldquo;Electronic Structure: Basic Theory and Practical Methods&rdquo; by Richard M. Martin</li>
<li>&ldquo;A Bird&rsquo;s-Eye View of Density-Functional Theory&rdquo; by Kieron Burke and Lucas O. Wagner (<a href="https://arxiv.org/abs/1308.5164">https://arxiv.org/abs/1308.5164</a>)</li>
<li>The Psi4NumPy project, which includes educational implementations of various quantum chemistry methods: <a href="https://github.com/psi4/psi4numpy">https://github.com/psi4/psi4numpy</a></li>
</ol>
<p>In the next blog post, we&rsquo;ll extend this code to handle 2D systems, introducing new challenges and opportunities for visualization and analysis of quantum systems.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Fitting the parameters in STO-LG</title>
      <link>https://chc273.github.io/posts/2022-01-01-fitting-parameters-in-sto-lg/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chc273.github.io/posts/2022-01-01-fitting-parameters-in-sto-lg/</guid>
      <description>Fitting the parameters in STO-LG In computational chemistry, the Slater-type orbital (STO) more accurately describes the qualitative features of the molecular orbitals than Gaussian functions (GF). However, calculating the two-electron integral using STO can be costly. On the other hand, integrating GFs is relatively cheap. One way to solve this problem is to use a linear combination of GFs to approximate a STO. Such linear combination of Gaussian functions is called contracted Gaussian functions (CGF).</description>
      <content:encoded><![CDATA[<h2 id="fitting-the-parameters-in-sto-lg">Fitting the parameters in STO-LG</h2>
<p>In computational chemistry, the Slater-type orbital (STO) more accurately describes the qualitative features of the molecular orbitals than Gaussian functions (GF). However, calculating the two-electron integral using STO can be costly. On the other hand, integrating GFs is relatively cheap. One way to solve this problem is to use a linear combination of GFs to approximate a STO. Such linear combination of Gaussian functions is called <em>contracted Gaussian functions</em> (CGF).</p>
<p>$$\phi_\mu^{CGF}(\vec{r}-\vec{R}_A) = \sum_{p=1}^L d_{p\mu} \phi_p^{GF} (\alpha_{p\mu}, \vec{r} - \vec{R}_A)$$</p>
<p>where <code>L</code> is the length of the contraction, $d_{p\mu}$ and $\alpha_{p\mu}$ are contraction coefficients and contraction exponents, respectively. Hence, the so-called STO-LG strategy uses <code>L</code> Gaussian-type orbitals to approximate one STO function.</p>
<h2 id="approximating-1s-slater-type-function-using-sto-lg">Approximating 1s Slater-type function using STO-LG</h2>
<p>The expressions for 1s STO and GF are</p>
<p>\begin{align}
\phi_{1s}^{STO} (\zeta, \vec{r}) = \left( \frac{\zeta^3}{\pi} \right)^{1/2} e^{-\zeta |\vec{r}-{\vec{R_A}}|} \notag \\
\phi_{1s}^{GF}(\alpha, \vec{r}) = \left(\frac{2\alpha}{\pi}\right)^{3/4} e^{-\alpha |\vec{r}-{\vec{R
_A}}|^2} \notag
\end{align}</p>
<p>where both orbitals have their corresponding parameters. The goal is to find the $d_{p}$ and $\alpha_{p}$ in the following equation</p>
<p>$$
\phi_{1s}^{STO} (\zeta, \vec{r}) = \sum_p^L d_{p}\phi_{1s}^{GF}(\alpha_p, \vec{r})
$$</p>
<h3 id="sto-1g-with-zeta--10">STO-1G with $\zeta = 1.0$</h3>
<p>In the first case, we will show the process of fitting the simplest function STO-1G by assuming $\zeta=1.0$ in the STO. Basically we will solve the following equation for $\alpha_{11}$</p>
<p>$$
\phi_{1s}^{STO} (\zeta=1.0, \vec{r}) = \phi_{1s}^{GF}(\alpha_{11}, \vec{r})
$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">zeta</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">a11</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s2">&#34;zeta r alpha a11&#34;</span><span class="p">,</span> <span class="n">positive</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  <span class="c1"># define the variables</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sto</span> <span class="o">=</span> <span class="p">(</span><span class="n">zeta</span> <span class="o">**</span><span class="mi">3</span> <span class="o">/</span> <span class="n">pi</span><span class="p">)</span> <span class="o">**</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">zeta</span> <span class="o">*</span> <span class="n">r</span><span class="p">)</span>  <span class="c1"># general expression for one STO</span>
</span></span><span class="line"><span class="cl"><span class="n">gf</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">alpha</span> <span class="o">/</span><span class="n">pi</span><span class="p">)</span> <span class="o">**</span> <span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">r</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># general expression for one GF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sto_1</span> <span class="o">=</span> <span class="n">sto</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">zeta</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>  <span class="c1"># zeta = 1.0</span>
</span></span><span class="line"><span class="cl"><span class="n">gf_1</span> <span class="o">=</span> <span class="n">gto</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">a11</span><span class="p">)</span>  <span class="c1"># alpha = a11</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Instead of minimize the differences between the two functions, we will maximize the overlap between the GF and the STO following Szabo&rsquo;s book.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">S</span> <span class="o">=</span> <span class="n">integrate</span><span class="p">(</span><span class="n">sto_1</span> <span class="o">*</span> <span class="n">gf_1</span> <span class="o">*</span> <span class="n">r</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oo</span><span class="p">))</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">pi</span>  <span class="c1"># the overlap between STO(1.0, r) and GF(alpha, r)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>We will maximize this overlap in terms of $a_{11}$. Since we will use scipy, we turn the maximization problem into minimzation of the negative of the overlap <code>S</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3">3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># function to minimize</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="n">S</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">a11</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">evalf</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="n">res</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy.optimize</span> <span class="kn">import</span> <span class="n">minimize</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">minimize</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">x0</span><span class="o">=</span><span class="p">[</span><span class="mf">0.2</span><span class="p">],</span> <span class="n">bounds</span><span class="o">=</span><span class="p">[(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">res</span><span class="o">.</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><pre><code>0.2709502078346618
</code></pre>
<p>We get the $\alpha_{11}$ value as 0.2709497296298158. This is almost identical to the result from Szabo&rsquo;s book.</p>
<h4 id="show-the-sto-1g-plot">Show the STO-1G plot</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;font.size&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">22</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;font.family&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Arial&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">gf_a1</span> <span class="o">=</span> <span class="n">lambdify</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">gf_1</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">a11</span><span class="p">,</span> <span class="n">res</span><span class="o">.</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="s2">&#34;numpy&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sto_1_np</span> <span class="o">=</span> <span class="n">lambdify</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">sto_1</span><span class="p">,</span> <span class="s2">&#34;numpy&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r_np</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">101</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r_np</span><span class="p">,</span> <span class="n">gf_a1</span><span class="p">(</span><span class="n">r_np</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;STO-1G&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r_np</span><span class="p">,</span> <span class="n">sto_1_np</span><span class="p">(</span><span class="n">r_np</span><span class="p">),</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;STO&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s2">&#34;$r$&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><pre><code>&lt;matplotlib.text.Text at 0x7fcc2089b898&gt;
</code></pre>
<!-- raw HTML omitted -->
<p>The results are reasonably good.</p>
<h3 id="sto-lg">STO-LG</h3>
<p>We will code the general procedure to calculate $L&gt;1$ CGFs.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1"> 1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2"> 2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3"> 3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4"> 4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5"> 5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6"> 6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7"> 7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8"> 8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9"> 9</a>
</span><span class="lnt" id="hl-7-10"><a class="lnlinks" href="#hl-7-10">10</a>
</span><span class="lnt" id="hl-7-11"><a class="lnlinks" href="#hl-7-11">11</a>
</span><span class="lnt" id="hl-7-12"><a class="lnlinks" href="#hl-7-12">12</a>
</span><span class="lnt" id="hl-7-13"><a class="lnlinks" href="#hl-7-13">13</a>
</span><span class="lnt" id="hl-7-14"><a class="lnlinks" href="#hl-7-14">14</a>
</span><span class="lnt" id="hl-7-15"><a class="lnlinks" href="#hl-7-15">15</a>
</span><span class="lnt" id="hl-7-16"><a class="lnlinks" href="#hl-7-16">16</a>
</span><span class="lnt" id="hl-7-17"><a class="lnlinks" href="#hl-7-17">17</a>
</span><span class="lnt" id="hl-7-18"><a class="lnlinks" href="#hl-7-18">18</a>
</span><span class="lnt" id="hl-7-19"><a class="lnlinks" href="#hl-7-19">19</a>
</span><span class="lnt" id="hl-7-20"><a class="lnlinks" href="#hl-7-20">20</a>
</span><span class="lnt" id="hl-7-21"><a class="lnlinks" href="#hl-7-21">21</a>
</span><span class="lnt" id="hl-7-22"><a class="lnlinks" href="#hl-7-22">22</a>
</span><span class="lnt" id="hl-7-23"><a class="lnlinks" href="#hl-7-23">23</a>
</span><span class="lnt" id="hl-7-24"><a class="lnlinks" href="#hl-7-24">24</a>
</span><span class="lnt" id="hl-7-25"><a class="lnlinks" href="#hl-7-25">25</a>
</span><span class="lnt" id="hl-7-26"><a class="lnlinks" href="#hl-7-26">26</a>
</span><span class="lnt" id="hl-7-27"><a class="lnlinks" href="#hl-7-27">27</a>
</span><span class="lnt" id="hl-7-28"><a class="lnlinks" href="#hl-7-28">28</a>
</span><span class="lnt" id="hl-7-29"><a class="lnlinks" href="#hl-7-29">29</a>
</span><span class="lnt" id="hl-7-30"><a class="lnlinks" href="#hl-7-30">30</a>
</span><span class="lnt" id="hl-7-31"><a class="lnlinks" href="#hl-7-31">31</a>
</span><span class="lnt" id="hl-7-32"><a class="lnlinks" href="#hl-7-32">32</a>
</span><span class="lnt" id="hl-7-33"><a class="lnlinks" href="#hl-7-33">33</a>
</span><span class="lnt" id="hl-7-34"><a class="lnlinks" href="#hl-7-34">34</a>
</span><span class="lnt" id="hl-7-35"><a class="lnlinks" href="#hl-7-35">35</a>
</span><span class="lnt" id="hl-7-36"><a class="lnlinks" href="#hl-7-36">36</a>
</span><span class="lnt" id="hl-7-37"><a class="lnlinks" href="#hl-7-37">37</a>
</span><span class="lnt" id="hl-7-38"><a class="lnlinks" href="#hl-7-38">38</a>
</span><span class="lnt" id="hl-7-39"><a class="lnlinks" href="#hl-7-39">39</a>
</span><span class="lnt" id="hl-7-40"><a class="lnlinks" href="#hl-7-40">40</a>
</span><span class="lnt" id="hl-7-41"><a class="lnlinks" href="#hl-7-41">41</a>
</span><span class="lnt" id="hl-7-42"><a class="lnlinks" href="#hl-7-42">42</a>
</span><span class="lnt" id="hl-7-43"><a class="lnlinks" href="#hl-7-43">43</a>
</span><span class="lnt" id="hl-7-44"><a class="lnlinks" href="#hl-7-44">44</a>
</span><span class="lnt" id="hl-7-45"><a class="lnlinks" href="#hl-7-45">45</a>
</span><span class="lnt" id="hl-7-46"><a class="lnlinks" href="#hl-7-46">46</a>
</span><span class="lnt" id="hl-7-47"><a class="lnlinks" href="#hl-7-47">47</a>
</span><span class="lnt" id="hl-7-48"><a class="lnlinks" href="#hl-7-48">48</a>
</span><span class="lnt" id="hl-7-49"><a class="lnlinks" href="#hl-7-49">49</a>
</span><span class="lnt" id="hl-7-50"><a class="lnlinks" href="#hl-7-50">50</a>
</span><span class="lnt" id="hl-7-51"><a class="lnlinks" href="#hl-7-51">51</a>
</span><span class="lnt" id="hl-7-52"><a class="lnlinks" href="#hl-7-52">52</a>
</span><span class="lnt" id="hl-7-53"><a class="lnlinks" href="#hl-7-53">53</a>
</span><span class="lnt" id="hl-7-54"><a class="lnlinks" href="#hl-7-54">54</a>
</span><span class="lnt" id="hl-7-55"><a class="lnlinks" href="#hl-7-55">55</a>
</span><span class="lnt" id="hl-7-56"><a class="lnlinks" href="#hl-7-56">56</a>
</span><span class="lnt" id="hl-7-57"><a class="lnlinks" href="#hl-7-57">57</a>
</span><span class="lnt" id="hl-7-58"><a class="lnlinks" href="#hl-7-58">58</a>
</span><span class="lnt" id="hl-7-59"><a class="lnlinks" href="#hl-7-59">59</a>
</span><span class="lnt" id="hl-7-60"><a class="lnlinks" href="#hl-7-60">60</a>
</span><span class="lnt" id="hl-7-61"><a class="lnlinks" href="#hl-7-61">61</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">display</span><span class="p">,</span> <span class="n">Math</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_gto</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">alpha</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">d</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">alpha</span> <span class="o">/</span><span class="n">pi</span><span class="p">)</span> <span class="o">**</span> <span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">r</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_symbols</span><span class="p">(</span><span class="n">L</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;d:</span><span class="si">{</span><span class="n">L</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">positive</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">alphas</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;alpha:</span><span class="si">{</span><span class="n">L</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">positive</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ds</span><span class="p">,</span> <span class="n">alphas</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">STOLG</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">L</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">zta</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">L</span> <span class="o">=</span> <span class="n">L</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">ds</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">alphas</span> <span class="o">=</span> <span class="n">get_symbols</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">GFs</span> <span class="o">=</span> <span class="p">[</span><span class="n">get_gto</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">d</span><span class="p">,</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ds</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">alphas</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">GF_sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">GFs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">gg_int</span> <span class="o">=</span> <span class="n">integrate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">GF_sum</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">GF_sum</span> <span class="o">*</span> <span class="n">r</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oo</span><span class="p">))</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">pi</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">gg_int</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gg_int</span><span class="o">.</span><span class="n">evalf</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">sto</span> <span class="o">=</span> <span class="n">sto</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">zeta</span><span class="p">,</span> <span class="n">zta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">S</span> <span class="o">=</span> <span class="n">integrate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">GF_sum</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">sto</span> <span class="o">*</span> <span class="n">r</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oo</span><span class="p">))</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">pi</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">def</span> <span class="nf">_func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">subs</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">j</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ds</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">alphas</span><span class="p">,</span> <span class="n">x</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">            <span class="n">d0_val</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">gg_int</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">subs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">subs</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">ds</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">d0_val</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">val</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">S</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">subs</span><span class="p">)</span><span class="o">.</span><span class="n">evalf</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># print(subs)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">subs</span> <span class="o">=</span> <span class="n">subs</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="o">-</span><span class="nb">float</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          
</span></span><span class="line"><span class="cl">        <span class="c1"># initial guesses</span>
</span></span><span class="line"><span class="cl">        <span class="n">d_vals</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">alpha_vals</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">L</span><span class="p">)</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">res</span> <span class="o">=</span> <span class="n">minimize</span><span class="p">(</span><span class="n">_func</span><span class="p">,</span> <span class="n">x0</span><span class="o">=</span><span class="n">d_vals</span> <span class="o">+</span> <span class="n">alpha_vals</span><span class="p">,</span> <span class="n">bounds</span><span class="o">=</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">res</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@property</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">expression</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">expr</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ds</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">alphas</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">expr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;</span><span class="si">%.6f</span><span class="s2">\phi^</span><span class="si">{GF}</span><span class="s2">(</span><span class="si">%.6f</span><span class="s2">)&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subs</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">subs</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">display</span><span class="p">(</span><span class="n">Math</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">expr</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@property</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">lambdify</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">GF_sum</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subs</span><span class="p">),</span> <span class="s2">&#34;numpy&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nd">@property</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">funcs</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[</span><span class="n">lambdify</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">subs</span><span class="p">),</span> <span class="s2">&#34;numpy&#34;</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">GFs</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">plot</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="bp">self</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="s1">&#39;STO-</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">L</span><span class="si">}</span><span class="s1">G&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">L</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="n">i</span><span class="p">](</span><span class="n">r</span><span class="p">),</span> <span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="s1">&#39;GF-</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">sto_1_np</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;STO&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sto-2g">STO-2G</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1">1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sto2g</span> <span class="o">=</span> <span class="n">STOLG</span><span class="p">(</span><span class="n">L</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sto2g</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><pre><code>      fun: -0.9984197028799346
 hess_inv: &lt;3x3 LbfgsInvHessProduct with dtype=float64&gt;
      jac: array([ 0.00000000e+00,  2.40918396e-06, -4.10782519e-07])
  message: b'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_&lt;=_PGTOL'
     nfev: 96
      nit: 19
   status: 0
  success: True
        x: array([0.43013353, 0.15162213, 0.85180271])
</code></pre>
<p>The overlap has reached 0.998 with only two GFs.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sto2g</span><span class="o">.</span><span class="n">expression</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><p>$$0.678908\phi^{GF}(0.151622)+0.430134\phi^{GF}(0.851803)$$</p>
<p>The expression above matches with Equation (3.220) in Szabo&rsquo;s book.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sto2g</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r_np</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><!-- raw HTML omitted -->
<h3 id="sto-3g">STO-3G</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1">1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sto3g</span> <span class="o">=</span> <span class="n">STOLG</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sto3g</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><pre><code>      fun: -0.9998347361981794
 hess_inv: &lt;5x5 LbfgsInvHessProduct with dtype=float64&gt;
      jac: array([5.09592368e-06, 1.04027897e-05, 1.17794663e-05, 5.55111512e-06,
       2.22044605e-08])
  message: b'CONVERGENCE: REL_REDUCTION_OF_F_&lt;=_FACTR*EPSMCH'
     nfev: 276
      nit: 39
   status: 0
  success: True
        x: array([0.53532369, 0.15432918, 0.10982016, 0.40578573, 2.22784233])
</code></pre>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sto3g</span><span class="o">.</span><span class="n">expression</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$$0.444642\phi^{GF}(0.109820)+0.535324\phi^{GF}(0.405786)+0.154329\phi^{GF}(2.227842)$$</p>
<p>Again the STO-3G expression matches with Equation (3.221) in Szabo&rsquo;s book.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-13-1"><a class="lnlinks" href="#hl-13-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sto3g</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">r_np</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><!-- raw HTML omitted -->
<h3 id="summary">Summary</h3>
<p>In this notebook, I show how we can fit the parameters in the contracted Gaussian functions. The results are relatively sensitive to the initial guesses given the optimizers. I believe it will be more so if <code>L</code> further increases.</p>
<p>I also see that with changing $\zeta$, the optimizer gives me results different from the scaling relationships. It will be interesting to further investigate the cause.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Calculating energy of 1D Schrödinger equation using Sympy</title>
      <link>https://chc273.github.io/posts/2021-12-11-sympy-for-hamiltonian/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chc273.github.io/posts/2021-12-11-sympy-for-hamiltonian/</guid>
      <description>Calculating energy of 1D Schrödinger equation using Sympy I was reading Szabo&amp;rsquo;s book &amp;ldquo;Modern Quantum Chemistry&amp;rdquo; and saw the exercise questions that seem to be solvable via programming. Hence I decided to give it a try and pick up sympy at the same time. I was a mathematica user back in undergrad, but have not used it ever since. Maybe sympy will just do the same trick.
Here is the question (exercise 1.</description>
      <content:encoded><![CDATA[<h2 id="calculating-energy-of-1d-schrödinger-equation-using-sympy">Calculating energy of 1D Schrödinger equation using Sympy</h2>
<p>I was reading Szabo&rsquo;s book &ldquo;Modern Quantum Chemistry&rdquo; and saw the exercise questions that seem to be solvable via programming. Hence I decided to give it a try and pick up <code>sympy</code> at the same time. I was a <code>mathematica</code> user back in undergrad, but have not used it ever since. Maybe <code>sympy</code> will just do the same trick.</p>
<!-- raw HTML omitted -->
<p>Here is the question (exercise 1.18 from the book)</p>
<p><strong>The Schrödinger equation (in atomic units) of an electron moving in one dimension under the influence of the potential $$-\delta(x)$$ is</strong></p>
<p>$$
\left(-\frac{1}{2}\frac{d^2}{dx^2} - \delta(x)\right) | \Phi\rangle = \epsilon | \Phi\rangle
$$</p>
<p><strong>Use the variation method with the trial function</strong></p>
<p>$$
| \tilde \Phi \rangle = N e^{-ax^2}
$$</p>
<p><strong>to show that $$-\pi^{-1}$$ is an upper bound to the exact group state energy (which is -0.5)</strong>.</p>
<!-- raw HTML omitted -->
<p>From the variational principle, we know if the normalized wavefunction satisfies the appropriate boundary condition, then the expectation of the Hamiltonian is an upper bound to the exact ground state energy. In math expressions, if</p>
<p>$$
\langle\tilde\Phi|\tilde\Phi \rangle = 1
$$</p>
<p>then</p>
<p>$$
\langle\tilde\Phi| \mathcal{H} | \tilde\Phi \rangle \ge \epsilon_0
$$</p>
<p>I will show how we can use <code>sympy</code> to solve this problem</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5">5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6">6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7">7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="o">*</span>  <span class="c1"># I dislike this way to import everything, but it seems to be common in sympy</span>
</span></span><span class="line"><span class="cl"><span class="n">init_printing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s2">&#34;x&#34;</span><span class="p">)</span>  <span class="c1"># define the symbols</span>
</span></span><span class="line"><span class="cl"><span class="n">N</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s2">&#34;N a&#34;</span><span class="p">,</span> <span class="n">positive</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  <span class="c1"># a should be positive to satisfy boundary cond at infinity</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">phi</span> <span class="o">=</span> <span class="n">N</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">a</span> <span class="o">*</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># this is our trial function</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="1-normalization-conditions">1. Normalization conditions</h3>
<p>We will need to normalize the wavefunction</p>
<p>$$
\langle\tilde\Phi|\tilde\Phi \rangle = 1
$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">phi2_int</span> <span class="o">=</span> <span class="n">integrate</span><span class="p">(</span><span class="n">phi</span> <span class="o">*</span> <span class="n">phi</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">oo</span><span class="p">,</span> <span class="n">oo</span><span class="p">))</span>  <span class="c1"># the integration of phi * phi. Our function is real here</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">phi2_int</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>$$\frac{\sqrt{2} \sqrt{\pi} N^{2}}{2 \sqrt{a}}$$</p>
<p>This expression equals to 1 from our normalization condition. Hence we can solve for $$N$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n_cond</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">phi2_int</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">n_cond</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>$$\left [ \left { N : \frac{\sqrt[4]{2} \sqrt[4]{a}}{\sqrt[4]{\pi}}\right }\right ]$$</p>
<h3 id="2-calculate-the-hamiltonian-with-the-trial-function">2. Calculate the Hamiltonian with the trial function</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1">1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2">2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3">3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4">4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5">5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">term1</span> <span class="o">=</span> <span class="n">integrate</span><span class="p">(</span><span class="n">phi</span> <span class="o">*</span> <span class="p">(</span><span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">diff</span><span class="p">(</span><span class="n">diff</span><span class="p">(</span><span class="n">phi</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span> <span class="n">x</span><span class="p">)),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">oo</span><span class="p">,</span> <span class="n">oo</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">term2</span> <span class="o">=</span> <span class="n">integrate</span><span class="p">(</span><span class="o">-</span><span class="n">phi</span> <span class="o">*</span> <span class="n">DiracDelta</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">phi</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">oo</span><span class="p">,</span> <span class="n">oo</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">H</span> <span class="o">=</span> <span class="n">term1</span> <span class="o">+</span> <span class="n">term2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">H</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$$0.25 \sqrt{2} \sqrt{\pi} N^{2} \sqrt{a} - N^{2}$$</p>
<h3 id="3-substitute-the-normalization-condition">3. Substitute the normalization condition</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2">2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">H_sol</span> <span class="o">=</span> <span class="n">H</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">n_cond</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">H_sol</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>$$- \frac{\sqrt{2} \sqrt{a}}{\sqrt{\pi}} + 0.5 a$$</p>
<p>This expression still contains $$a$$. To find the minimum of this equation, we will need to solve for $$a$$</p>
<h3 id="4-minimize-with-respect-to-a">4. Minimize with respect to $$a$$</h3>
<p>$$a$$ is minimal when $$\partial H_{sol}/\partial a = 0$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a_sol</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">diff</span><span class="p">(</span><span class="n">H_sol</span><span class="p">,</span> <span class="n">a</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">a_sol</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$$0.636619772367581$$</p>
<p>substitute $$a$$ solution into the solution for $$H$$, we get</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">H_sol</span><span class="o">.</span><span class="n">subs</span><span class="p">({</span><span class="n">a</span><span class="p">:</span> <span class="n">a_sol</span><span class="p">})</span><span class="o">.</span><span class="n">evalf</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$$-0.318309886183791$$</p>
<p>which is exactly $$-\pi^{-1}$$</p>
<p>In summary, in this notebook, I show how we can use <code>sympy</code> to solve simple Schrödinger equation. Sometimes, using <code>sympy</code> can be unintuitive especially if the bounds of the variables are not properly set. In that case, you will get piecewise function results, and you will need to manually select the correct solutions.</p>
<p>I found the use of expression <code>oo</code> to represent infinity quite interesting and brilliant.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Speed comparison among numpy, cython, numba and tensorflow 2.0</title>
      <link>https://chc273.github.io/posts/2019-10-04-speed-comparison-among-numpy-cython-numba-and-tensorflow/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chc273.github.io/posts/2019-10-04-speed-comparison-among-numpy-cython-numba-and-tensorflow/</guid>
      <description>Speed comparison among numpy, cython, numba and tensorflow 2.0 Recently I have been working on speeding up some codes in pymatgen for finding the atomic neighbors within a cutoff radius. I was searching online and found that cython is a rather powerful tool for accelerating python loops, and decided to give it a try.
A common comparison for cython is numba and I have heard many good things about it. A less common competitor is the recently released tensorflow 2.</description>
      <content:encoded><![CDATA[<h2 id="speed-comparison-among-numpy-cython-numba-and-tensorflow-20">Speed comparison among numpy, cython, numba and tensorflow 2.0</h2>
<p>Recently I have been working on speeding up some codes in pymatgen for finding the atomic neighbors within a cutoff radius. I was searching online and found that <code>cython</code> is a rather powerful tool for accelerating python loops, and decided to give it a try.</p>
<p>A common comparison for <code>cython</code> is <code>numba</code> and I have heard many good things about it. A less common competitor is the recently released <code>tensorflow 2.0</code>. In fact, back in the <code>tensorflow 1.x</code> era, I did some simple comparisons and found that the speed was in fact faster than <code>numpy</code>. The new <code>tensorflow 2.0</code> is boasted to be 3x faster than <code>tensorflow 1.x</code>, and it makes me wonder how faster would <code>tensorflow 2.0</code> be for some simple computing tasks.</p>
<h3 id="function-decorate-to-record-time">Function decorate to record time</h3>
<p>I like to do simple things myself so that I know what exactly happens in the code. So I am writing a timeit decorator instead of using <code>timeit</code> package.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">functools</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">timeit</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Decorator to run function n times and print out the total time elapsed.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">dec</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">%s</span><span class="s2"> iterated </span><span class="si">%d</span><span class="s2"> times</span><span class="se">\n</span><span class="s2">Time elapsed </span><span class="si">%.3f</span><span class="s2">s</span><span class="se">\n</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">t0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">wrapped</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dec</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="computing-functions-using-different-methods">Computing functions using different methods</h3>
<p>Here I am computing</p>
<p>\[matrix[i, j] = i^2 + j^2\]</p>
<p>for a matrix of size <code>[m, n]</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4">4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5">5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># import numba, tensorflow and numpy, load cython</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numba</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">load_ext</span> <span class="n">cython</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3">3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4">4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5">5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6">6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7">7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@tf.function</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compute_tf</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Tracing &#39;</span><span class="p">,</span>  <span class="n">m</span><span class="p">,</span>  <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x1</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">x2</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x1</span><span class="p">[:,</span> <span class="kc">None</span><span class="p">]</span> <span class="o">+</span> <span class="n">x2</span><span class="p">[</span><span class="kc">None</span><span class="p">,</span> <span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">compute_tf</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">constant</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">tf</span><span class="o">.</span><span class="n">constant</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="c1"># trace once</span>
</span></span></code></pre></td></tr></table>
</div>
</div><pre><code>Tracing  Tensor(&quot;m:0&quot;, shape=(), dtype=int32) Tensor(&quot;n:0&quot;, shape=(), dtype=int32)
&lt;tf.Tensor: id=261, shape=(0, 0), dtype=int32, numpy=array([], shape=(0, 0), dtype=int32)&gt;
</code></pre>
<p>I used the <code>tf.function</code> decorate to define the graph and avoided repeated tracing the graph by using <code>tf.constant</code> as input and perform the initial graph tracing. You will see that running this function will not invoke the <code>print</code> function. It is only traced once</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1">1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2">2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3">3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compute_numpy</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x1</span><span class="p">[:,</span> <span class="kc">None</span><span class="p">]</span> <span class="o">+</span> <span class="n">x2</span><span class="p">[</span><span class="kc">None</span><span class="p">,</span> <span class="p">:]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1">1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2">2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3">3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4">4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5">5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6">6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7">7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8">8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@numba.njit</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compute_numba</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span>  <span class="n">i</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">j</span><span class="o">**</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">compute_numba</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># JIT compile first</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3">3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4">4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5">5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6">6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7">7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8">8</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@numba.njit</span><span class="p">(</span><span class="n">parallel</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compute_numba_parallel</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">numba</span><span class="o">.</span><span class="n">prange</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">numba</span><span class="o">.</span><span class="n">prange</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span>  <span class="n">i</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">j</span><span class="o">**</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl"><span class="n">compute_numba_parallel</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># JIT compile first</span>
</span></span></code></pre></td></tr></table>
</div>
</div><pre><code>array([[0.]])
</code></pre>
<p>Numpy and numba are almost the same. <code>numba</code> is really handy in terms of turning on parallel computations.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%%</span><span class="n">cython</span>
</span></span><span class="line"><span class="cl"><span class="n">cimport</span> <span class="n">cython</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="n">cimport</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
</span></span><span class="line"><span class="cl"><span class="nd">@cython.boundscheck</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@cython.wraparound</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compute_cython</span><span class="p">(</span><span class="nb">int</span> <span class="n">m</span><span class="p">,</span> <span class="nb">int</span> <span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cdef</span> <span class="n">long</span> <span class="p">[:,</span> <span class="p">::</span><span class="mi">1</span><span class="p">]</span> <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span><span class="n">j</span><span class="o">*</span><span class="n">j</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>cython</code> needs more work and i am delegating the memory management to <code>numpy</code> here and use <code>memoryview</code> x. Basically it is like <code>C</code>. Note that <code>cython</code> can also turn on parallel computations like <code>numba</code> by using <code>cython.parallel.prange</code>. However it does require <code>openmp</code>, which does not ship with <code>clang</code> compiler in macos. So I am not testing the parallel version here.</p>
<h3 id="results">Results</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3">3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4">4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5">5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6">6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7">7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8">8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9">9</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">m</span> <span class="o">=</span> <span class="mi">2000</span>
</span></span><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="mi">10000</span>
</span></span><span class="line"><span class="cl"><span class="n">n_loop</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">timeit</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n_loop</span><span class="p">)(</span><span class="n">compute_numpy</span><span class="p">)(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">timeit</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n_loop</span><span class="p">)(</span><span class="n">compute_numba</span><span class="p">)(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">timeit</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n_loop</span><span class="p">)(</span><span class="n">compute_numba_parallel</span><span class="p">)(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">timeit</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n_loop</span><span class="p">)(</span><span class="n">compute_cython</span><span class="p">)(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">timeit</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n_loop</span><span class="p">)(</span><span class="n">compute_tf</span><span class="p">)(</span><span class="n">tf</span><span class="o">.</span><span class="n">constant</span><span class="p">(</span><span class="n">m</span><span class="p">),</span> <span class="n">tf</span><span class="o">.</span><span class="n">constant</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><pre><code>compute_numpy iterated 10 times
Time elapsed 0.971s

compute_numba iterated 10 times
Time elapsed 1.110s

compute_numba_parallel iterated 10 times
Time elapsed 0.651s

compute_cython iterated 10 times
Time elapsed 1.098s

compute_tf iterated 10 times
Time elapsed 0.190s
</code></pre>
<h3 id="conclusion">Conclusion</h3>
<p><code>Tensorflow 2.0</code> is amazing.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
