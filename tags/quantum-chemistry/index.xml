<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>quantum-chemistry on Chi&#39;s blog</title>
    <link>https://chc273.github.io/tags/quantum-chemistry/</link>
    <description>Recent content in quantum-chemistry on Chi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chc273.github.io/tags/quantum-chemistry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fitting the parameters in STO-LG</title>
      <link>https://chc273.github.io/posts/2022-01-01-fitting-parameters-in-sto-lg/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chc273.github.io/posts/2022-01-01-fitting-parameters-in-sto-lg/</guid>
      <description>Fitting the parameters in STO-LG In computational chemistry, the Slater-type orbital (STO) more accurately describes the qualitative features of the molecular orbitals than Gaussian functions (GF). However, calculating the two-electron integral using STO can be costly. On the other hand, integrating GFs is relatively cheap. One way to solve this problem is to use a linear combination of GFs to approximate a STO. Such linear combination of Gaussian functions is called contracted Gaussian functions (CGF).</description>
      <content:encoded><![CDATA[<h2 id="fitting-the-parameters-in-sto-lg">Fitting the parameters in STO-LG</h2>
<p>In computational chemistry, the Slater-type orbital (STO) more accurately describes the qualitative features of the molecular orbitals than Gaussian functions (GF). However, calculating the two-electron integral using STO can be costly. On the other hand, integrating GFs is relatively cheap. One way to solve this problem is to use a linear combination of GFs to approximate a STO. Such linear combination of Gaussian functions is called <em>contracted Gaussian functions</em> (CGF).</p>
<p>$$\phi_\mu^{CGF}(\vec{r}-\vec{R}_A) = \sum_{p=1}^L d_{p\mu} \phi_p^{GF} (\alpha_{p\mu}, \vec{r} - \vec{R}_A)$$</p>
<p>where <code>L</code> is the length of the contraction, $d_{p\mu}$ and $\alpha_{p\mu}$ are contraction coefficients and contraction exponents, respectively. Hence, the so-called STO-LG strategy uses <code>L</code> Gaussian-type orbitals to approximate one STO function.</p>
<h2 id="approximating-1s-slater-type-function-using-sto-lg">Approximating 1s Slater-type function using STO-LG</h2>
<p>The expressions for 1s STO and GF are</p>
<p>\begin{align}
\phi_{1s}^{STO} (\zeta, \vec{r}) = \left( \frac{\zeta^3}{\pi} \right)^{1/2} e^{-\zeta |\vec{r}-{\vec{R_A}}|} \notag \\
\phi_{1s}^{GF}(\alpha, \vec{r}) = \left(\frac{2\alpha}{\pi}\right)^{3/4} e^{-\alpha |\vec{r}-{\vec{R
_A}}|^2} \notag
\end{align}</p>
<p>where both orbitals have their corresponding parameters. The goal is to find the $d_{p}$ and $\alpha_{p}$ in the following equation</p>
<p>$$
\phi_{1s}^{STO} (\zeta, \vec{r}) = \sum_p^L d_{p}\phi_{1s}^{GF}(\alpha_p, \vec{r})
$$</p>
<h3 id="sto-1g-with-zeta--10">STO-1G with $\zeta = 1.0$</h3>
<p>In the first case, we will show the process of fitting the simplest function STO-1G by assuming $\zeta=1.0$ in the STO. Basically we will solve the following equation for $\alpha_{11}$</p>
<p>$$
\phi_{1s}^{STO} (\zeta=1.0, \vec{r}) = \phi_{1s}^{GF}(\alpha_{11}, \vec{r})
$$</p>
<pre><code class="language-python">from sympy import *
import numpy as np

zeta, r, alpha, a11 = symbols(&quot;zeta r alpha a11&quot;, positive=True)  # define the variables

sto = (zeta **3 / pi) ** (1/2) * exp(-zeta * r)  # general expression for one STO
gf = (2 * alpha /pi) ** (3/4) * exp(-alpha * r**2)  # general expression for one GF

sto_1 = sto.subs(zeta, 1.0)  # zeta = 1.0
gf_1 = gto.subs(alpha, a11)  # alpha = a11
</code></pre>
<p>Instead of minimize the differences between the two functions, we will maximize the overlap between the GF and the STO following Szabo&rsquo;s book.</p>
<pre><code class="language-python">S = integrate(sto_1 * gf_1 * r**2, (r, 0, oo)) * 4 * pi  # the overlap between STO(1.0, r) and GF(alpha, r)
</code></pre>
<p>We will maximize this overlap in terms of $a_{11}$. Since we will use scipy, we turn the maximization problem into minimzation of the negative of the overlap <code>S</code>.</p>
<pre><code class="language-python"># function to minimize
def func(a):
    res = S.subs(a11, a[0]).evalf()
    return -res
</code></pre>
<pre><code class="language-python">from scipy.optimize import minimize
</code></pre>
<pre><code class="language-python">res = minimize(func, x0=[0.2], bounds=[(0.1, 1)])
</code></pre>
<pre><code class="language-python">res.x[0]
</code></pre>
<pre><code>0.2709502078346618
</code></pre>
<p>We get the $\alpha_{11}$ value as 0.2709497296298158. This is almost identical to the result from Szabo&rsquo;s book.</p>
<h4 id="show-the-sto-1g-plot">Show the STO-1G plot</h4>
<pre><code class="language-python">import matplotlib.pyplot as plt
%matplotlib inline

plt.rcParams['font.size'] = 22
plt.rcParams['font.family'] = 'Arial'
gf_a1 = lambdify(r, gf_1.subs(a11, res.x[0]), &quot;numpy&quot;)
sto_1_np = lambdify(r, sto_1, &quot;numpy&quot;)
r_np = np.linspace(0, 10, 101)

plt.plot(r_np, gf_a1(r_np), label='STO-1G')
plt.plot(r_np, sto_1_np(r_np), label='STO')
plt.legend()
plt.xlabel(&quot;$r$&quot;)
</code></pre>
<pre><code>&lt;matplotlib.text.Text at 0x7fcc2089b898&gt;
</code></pre>
<img src="{{ site.url }}{{ site.baseurl }}/assets/images/STO-NG_18_1.png" alt="" class="full">
<p>The results are reasonably good.</p>
<h3 id="sto-lg">STO-LG</h3>
<p>We will code the general procedure to calculate $L&gt;1$ CGFs.</p>
<pre><code class="language-python">from IPython.display import display, Math

def get_gto(d, alpha):
    return d * (2 * alpha /pi) ** (3/4) * exp(-alpha * r**2)

def get_symbols(L):
    ds = symbols(f'd:{L}', positive=True)
    alphas = symbols(f'alpha:{L}', positive=True)
    return ds, alphas

class STOLG:
    def __init__(self, L=3, zta=1.0):
        self.L = L
        self.ds, self.alphas = get_symbols(L)
        self.GFs = [get_gto(d, a) for d, a in zip(self.ds, self.alphas)]
        self.GF_sum = sum(self.GFs)
        self.gg_int = integrate(self.GF_sum * self.GF_sum * r**2, (r, 0, oo)) * 4 * pi
        self.gg_int = self.gg_int.evalf()
        self.sto = sto.subs(zeta, zta)
        self.S = integrate(self.GF_sum * self.sto * r**2, (r, 0, oo)) * 4 * pi
        
    def fit(self):
        def _func(x):
            subs = {i: j for i, j in zip(self.ds[1:]+self.alphas, x)}
            d0_val = solve(self.gg_int.subs(subs) - 1)
            subs[self.ds[0]] = d0_val[0]
            val = self.S.subs(subs).evalf()
            # print(subs)
            self.subs = subs
            return -float(val)
          
        # initial guesses
        d_vals = np.linspace(0.1, 0.9, self.L-1).tolist()
        alpha_vals = np.linspace(0.1, 0.9, self.L).tolist()
        self.res = minimize(_func, x0=d_vals + alpha_vals, bounds=[(0, 10)] * (2 * self.L - 1))
        return self.res
    
    @property
    def expression(self):
        expr = []
        for i, j in zip(self.ds, self.alphas):
            expr.append(r&quot;%.6f\phi^{GF}(%.6f)&quot; % (self.subs[i], self.subs[j]))
        return display(Math('+'.join(expr)))
    
    @property
    def func(self):
        return lambdify(r, self.GF_sum.subs(self.subs), &quot;numpy&quot;)
    
    @property
    def funcs(self):
        return [lambdify(r, i.subs(self.subs), &quot;numpy&quot;) for i in self.GFs]
    
    def __call__(self, r):
        return self.func(r)
    
    def plot(self, r):
        plt.plot(r, self(r), '-', label=f'STO-{self.L}G')
        for i in range(self.L):
            plt.plot(r, self.funcs[i](r), '--', label=f'GF-{i}')
        plt.plot(r, sto_1_np(r), '-', label='STO')
        plt.legend()
</code></pre>
<h3 id="sto-2g">STO-2G</h3>
<pre><code class="language-python">sto2g = STOLG(L=2)
sto2g.fit()
</code></pre>
<pre><code>      fun: -0.9984197028799346
 hess_inv: &lt;3x3 LbfgsInvHessProduct with dtype=float64&gt;
      jac: array([ 0.00000000e+00,  2.40918396e-06, -4.10782519e-07])
  message: b'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_&lt;=_PGTOL'
     nfev: 96
      nit: 19
   status: 0
  success: True
        x: array([0.43013353, 0.15162213, 0.85180271])
</code></pre>
<p>The overlap has reached 0.998 with only two GFs.</p>
<pre><code class="language-python">sto2g.expression  
</code></pre>
<p>$$0.678908\phi^{GF}(0.151622)+0.430134\phi^{GF}(0.851803)$$</p>
<p>The expression above matches with Equation (3.220) in Szabo&rsquo;s book.</p>
<pre><code class="language-python">sto2g.plot(r_np)
</code></pre>
<img src="{{ site.url }}{{ site.baseurl }}/assets/images/STO-NG_28_0.png" alt="" class="full">
<h3 id="sto-3g">STO-3G</h3>
<pre><code class="language-python">sto3g = STOLG(3)
sto3g.fit()
</code></pre>
<pre><code>      fun: -0.9998347361981794
 hess_inv: &lt;5x5 LbfgsInvHessProduct with dtype=float64&gt;
      jac: array([5.09592368e-06, 1.04027897e-05, 1.17794663e-05, 5.55111512e-06,
       2.22044605e-08])
  message: b'CONVERGENCE: REL_REDUCTION_OF_F_&lt;=_FACTR*EPSMCH'
     nfev: 276
      nit: 39
   status: 0
  success: True
        x: array([0.53532369, 0.15432918, 0.10982016, 0.40578573, 2.22784233])
</code></pre>
<pre><code class="language-python">sto3g.expression
</code></pre>
<p>$$0.444642\phi^{GF}(0.109820)+0.535324\phi^{GF}(0.405786)+0.154329\phi^{GF}(2.227842)$$</p>
<p>Again the STO-3G expression matches with Equation (3.221) in Szabo&rsquo;s book.</p>
<pre><code class="language-python">sto3g.plot(r_np)
</code></pre>
<img src="{{ site.url }}{{ site.baseurl }}/assets/images/STO-NG_33_0.png" alt="" class="full">
<h3 id="summary">Summary</h3>
<p>In this notebook, I show how we can fit the parameters in the contracted Gaussian functions. The results are relatively sensitive to the initial guesses given the optimizers. I believe it will be more so if <code>L</code> further increases.</p>
<p>I also see that with changing $\zeta$, the optimizer gives me results different from the scaling relationships. It will be interesting to further investigate the cause.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Calculating energy of 1D Schrödinger equation using Sympy</title>
      <link>https://chc273.github.io/posts/2021-12-11-sympy-for-hamiltonian/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chc273.github.io/posts/2021-12-11-sympy-for-hamiltonian/</guid>
      <description>Calculating energy of 1D Schrödinger equation using Sympy I was reading Szabo&amp;rsquo;s book &amp;ldquo;Modern Quantum Chemistry&amp;rdquo; and saw the exercise questions that seem to be solvable via programming. Hence I decided to give it a try and pick up sympy at the same time. I was a mathematica user back in undergrad, but have not used it ever since. Maybe sympy will just do the same trick.
Here is the question (exercise 1.</description>
      <content:encoded><![CDATA[<h2 id="calculating-energy-of-1d-schrödinger-equation-using-sympy">Calculating energy of 1D Schrödinger equation using Sympy</h2>
<p>I was reading Szabo&rsquo;s book &ldquo;Modern Quantum Chemistry&rdquo; and saw the exercise questions that seem to be solvable via programming. Hence I decided to give it a try and pick up <code>sympy</code> at the same time. I was a <code>mathematica</code> user back in undergrad, but have not used it ever since. Maybe <code>sympy</code> will just do the same trick.</p>
<hr/>
<p>Here is the question (exercise 1.18 from the book)</p>
<p><strong>The Schrödinger equation (in atomic units) of an electron moving in one dimension under the influence of the potential $$-\delta(x)$$ is</strong></p>
<p>$$
\left(-\frac{1}{2}\frac{d^2}{dx^2} - \delta(x)\right) | \Phi\rangle = \epsilon | \Phi\rangle
$$</p>
<p><strong>Use the variation method with the trial function</strong></p>
<p>$$
| \tilde \Phi \rangle = N e^{-ax^2}
$$</p>
<p><strong>to show that $$-\pi^{-1}$$ is an upper bound to the exact group state energy (which is -0.5)</strong>.</p>
<hr/>
<p>From the variational principle, we know if the normalized wavefunction satisfies the appropriate boundary condition, then the expectation of the Hamiltonian is an upper bound to the exact ground state energy. In math expressions, if</p>
<p>$$
\langle\tilde\Phi|\tilde\Phi \rangle = 1
$$</p>
<p>then</p>
<p>$$
\langle\tilde\Phi| \mathcal{H} | \tilde\Phi \rangle \ge \epsilon_0
$$</p>
<p>I will show how we can use <code>sympy</code> to solve this problem</p>
<pre><code class="language-python">from sympy import *  # I dislike this way to import everything, but it seems to be common in sympy
init_printing()


x = symbols(&quot;x&quot;)  # define the symbols
N, a = symbols(&quot;N a&quot;, positive=True)  # a should be positive to satisfy boundary cond at infinity

phi = N * exp(-a * x ** 2)  # this is our trial function
</code></pre>
<h3 id="1-normalization-conditions">1. Normalization conditions</h3>
<p>We will need to normalize the wavefunction</p>
<p>$$
\langle\tilde\Phi|\tilde\Phi \rangle = 1
$$</p>
<pre><code class="language-python">phi2_int = integrate(phi * phi, (x, -oo, oo))  # the integration of phi * phi. Our function is real here

phi2_int 
</code></pre>
<p>$$\frac{\sqrt{2} \sqrt{\pi} N^{2}}{2 \sqrt{a}}$$</p>
<p>This expression equals to 1 from our normalization condition. Hence we can solve for $$N$$</p>
<pre><code class="language-python">n_cond = solve(phi2_int-1)
n_cond 
</code></pre>
<p>$$\left [ \left { N : \frac{\sqrt[4]{2} \sqrt[4]{a}}{\sqrt[4]{\pi}}\right }\right ]$$</p>
<h3 id="2-calculate-the-hamiltonian-with-the-trial-function">2. Calculate the Hamiltonian with the trial function</h3>
<pre><code class="language-python">term1 = integrate(phi * (-0.5 * diff(diff(phi, x), x)), (x, -oo, oo))
term2 = integrate(-phi * DiracDelta(x) * phi, (x, -oo, oo))

H = term1 + term2

H
</code></pre>
<p>$$0.25 \sqrt{2} \sqrt{\pi} N^{2} \sqrt{a} - N^{2}$$</p>
<h3 id="3-substitute-the-normalization-condition">3. Substitute the normalization condition</h3>
<pre><code class="language-python">H_sol = H.subs(n_cond[0])

H_sol 
</code></pre>
<p>$$- \frac{\sqrt{2} \sqrt{a}}{\sqrt{\pi}} + 0.5 a$$</p>
<p>This expression still contains $$a$$. To find the minimum of this equation, we will need to solve for $$a$$</p>
<h3 id="4-minimize-with-respect-to-a">4. Minimize with respect to $$a$$</h3>
<p>$$a$$ is minimal when $$\partial H_{sol}/\partial a = 0$$</p>
<pre><code class="language-python">a_sol = solve(diff(H_sol, a))[0]
a_sol
</code></pre>
<p>$$0.636619772367581$$</p>
<p>substitute $$a$$ solution into the solution for $$H$$, we get</p>
<pre><code class="language-python">H_sol.subs({a: a_sol}).evalf()
</code></pre>
<p>$$-0.318309886183791$$</p>
<p>which is exactly $$-\pi^{-1}$$</p>
<p>In summary, in this notebook, I show how we can use <code>sympy</code> to solve simple Schrödinger equation. Sometimes, using <code>sympy</code> can be unintuitive especially if the bounds of the variables are not properly set. In that case, you will get piecewise function results, and you will need to manually select the correct solutions.</p>
<p>I found the use of expression <code>oo</code> to represent infinity quite interesting and brilliant.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
