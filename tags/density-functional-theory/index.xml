<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>density-functional-theory on Chi&#39;s blog</title>
    <link>https://chc273.github.io/tags/density-functional-theory/</link>
    <description>Recent content in density-functional-theory on Chi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://chc273.github.io/tags/density-functional-theory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a 1D Density Functional Theory Code in Python</title>
      <link>https://chc273.github.io/posts/2022-02-02-density-functional-theory-1/</link>
      <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://chc273.github.io/posts/2022-02-02-density-functional-theory-1/</guid>
      <description>Introduction to 1D Density Functional Theory Density Functional Theory (DFT) is a powerful computational method used in quantum chemistry and solid-state physics to investigate the electronic structure of many-body systems. While real-world applications of DFT often deal with three-dimensional systems, exploring DFT in one dimension provides an excellent starting point for understanding the fundamental concepts and implementation details.
In this blog post, we&amp;rsquo;ll walk through the process of building a 1D DFT code using Python.</description>
      <content:encoded><![CDATA[<h2 id="introduction-to-1d-density-functional-theory">Introduction to 1D Density Functional Theory</h2>
<p>Density Functional Theory (DFT) is a powerful computational method used in quantum chemistry and solid-state physics to investigate the electronic structure of many-body systems. While real-world applications of DFT often deal with three-dimensional systems, exploring DFT in one dimension provides an excellent starting point for understanding the fundamental concepts and implementation details.</p>
<p>In this blog post, we&rsquo;ll walk through the process of building a 1D DFT code using Python. We&rsquo;ll focus on a simple system - a particle in a box - to illustrate the key components of DFT calculations.</p>
<h2 id="theoretical-background">Theoretical Background</h2>
<p>Before diving into the code, let&rsquo;s briefly review the theoretical foundations of DFT in the context of a 1D system.</p>
<p>The core idea of DFT is that the ground state properties of a many-electron system can be determined using the electron density $n(x)$, rather than the many-body wavefunction. This is based on the Hohenberg-Kohn theorems, which state that:</p>
<ol>
<li>The external potential, and hence the total energy, is a unique functional of the electron density.</li>
<li>The ground state energy can be obtained variationally: the density that minimizes the total energy is the exact ground state density.</li>
</ol>
<p>In the Kohn-Sham formulation of DFT, we map the interacting system onto a fictitious system of non-interacting particles that generate the same density. The Kohn-Sham equations for a 1D system are:</p>
<p>$$
\left[-\frac{1}{2}\frac{d^2}{dx^2} + v_{eff}(x)\right]\phi_i(x) = \epsilon_i\phi_i(x)
$$</p>
<p>where $\phi_i(x)$ are the Kohn-Sham orbitals, $\epsilon_i$ are their energies, and $v_{eff}(x)$ is the effective potential:</p>
<p>$$
v_{eff}(x) = v_{ext}(x) + v_H(x) + v_{xc}(x)
$$</p>
<p>Here, $v_{ext}(x)$ is the external potential, $v_H(x)$ is the Hartree potential, and $v_{xc}(x)$ is the exchange-correlation potential.</p>
<h2 id="implementation-overview">Implementation Overview</h2>
<p>Our 1D DFT code will consist of several key components:</p>
<ol>
<li>Basis set definition</li>
<li>Hamiltonian construction</li>
<li>Density calculation</li>
<li>Potential calculation</li>
<li>Self-consistent field (SCF) loop</li>
</ol>
<p>We&rsquo;ll implement these components step by step, explaining the purpose and functionality of each part.</p>
<h2 id="setting-up-the-environment">Setting Up the Environment</h2>
<p>First, let&rsquo;s import the necessary Python libraries:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">run</span> <span class="n">jupyter_image_saver</span><span class="o">.</span><span class="n">py</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1">1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2">2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">linalg</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="basis-set-definition">Basis Set Definition</h2>
<p>For our 1D DFT code, we&rsquo;ll use a simple basis set of sine functions, which are eigenfunctions of the particle in a box:</p>
<p>$$
\chi_n(x) = \sqrt{\frac{2}{L}} \sin\left(\frac{n\pi x}{L}\right)
$$</p>
<p>where $L$ is the box length and $n$ is the basis function index.</p>
<p>The Kohn-Sham orbital $\phi_i$ is expressed as</p>
<p>$$
\phi_i(x) = \sum_n c_{in}\chi_n(x)
$$</p>
<p>Let&rsquo;s implement this basis set:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1"> 1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2"> 2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3"> 3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4"> 4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5"> 5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6"> 6</a>
</span><span class="lnt" id="hl-2-7"><a class="lnlinks" href="#hl-2-7"> 7</a>
</span><span class="lnt" id="hl-2-8"><a class="lnlinks" href="#hl-2-8"> 8</a>
</span><span class="lnt" id="hl-2-9"><a class="lnlinks" href="#hl-2-9"> 9</a>
</span><span class="lnt" id="hl-2-10"><a class="lnlinks" href="#hl-2-10">10</a>
</span><span class="lnt" id="hl-2-11"><a class="lnlinks" href="#hl-2-11">11</a>
</span><span class="lnt" id="hl-2-12"><a class="lnlinks" href="#hl-2-12">12</a>
</span><span class="lnt" id="hl-2-13"><a class="lnlinks" href="#hl-2-13">13</a>
</span><span class="lnt" id="hl-2-14"><a class="lnlinks" href="#hl-2-14">14</a>
</span><span class="lnt" id="hl-2-15"><a class="lnlinks" href="#hl-2-15">15</a>
</span><span class="lnt" id="hl-2-16"><a class="lnlinks" href="#hl-2-16">16</a>
</span><span class="lnt" id="hl-2-17"><a class="lnlinks" href="#hl-2-17">17</a>
</span><span class="lnt" id="hl-2-18"><a class="lnlinks" href="#hl-2-18">18</a>
</span><span class="lnt" id="hl-2-19"><a class="lnlinks" href="#hl-2-19">19</a>
</span><span class="lnt" id="hl-2-20"><a class="lnlinks" href="#hl-2-20">20</a>
</span><span class="lnt" id="hl-2-21"><a class="lnlinks" href="#hl-2-21">21</a>
</span><span class="lnt" id="hl-2-22"><a class="lnlinks" href="#hl-2-22">22</a>
</span><span class="lnt" id="hl-2-23"><a class="lnlinks" href="#hl-2-23">23</a>
</span><span class="lnt" id="hl-2-24"><a class="lnlinks" href="#hl-2-24">24</a>
</span><span class="lnt" id="hl-2-25"><a class="lnlinks" href="#hl-2-25">25</a>
</span><span class="lnt" id="hl-2-26"><a class="lnlinks" href="#hl-2-26">26</a>
</span><span class="lnt" id="hl-2-27"><a class="lnlinks" href="#hl-2-27">27</a>
</span><span class="lnt" id="hl-2-28"><a class="lnlinks" href="#hl-2-28">28</a>
</span><span class="lnt" id="hl-2-29"><a class="lnlinks" href="#hl-2-29">29</a>
</span><span class="lnt" id="hl-2-30"><a class="lnlinks" href="#hl-2-30">30</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">basis_function</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">L</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Compute the nth basis function for a particle in a box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        n (int): Basis function index (quantum number).
</span></span></span><span class="line"><span class="cl"><span class="s2">        L (float): Length of the box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Values of the nth basis function at the given grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="n">L</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">x</span> <span class="o">/</span> <span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_basis_set</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">L</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Create a set of basis functions for a particle in a box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions to generate.
</span></span></span><span class="line"><span class="cl"><span class="s2">        L (float): Length of the box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: 2D array where each column is a basis function evaluated at the grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">basis_set</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">num_basis_functions</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_basis_functions</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">basis_set</span><span class="p">[:,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">basis_function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">basis_set</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="hamiltonian-construction">Hamiltonian Construction</h2>
<p>The next step is to construct the Hamiltonian matrix. In the basis of sine functions, the kinetic energy term is diagonal:</p>
<p>$$
T_{mn} = -\frac{1}{2}\int_0^L \chi_m(x)\frac{d^2}{dx^2} \chi_n(x)dx = \frac{n^2\pi^2}{2L^2}\delta_{mn}
$$</p>
<p>The potential energy term needs to be integrated numerically:</p>
<p>$$
V_{mn} = \int_0^L \chi_m(x) v_{eff}(x) \chi_n(x) dx
$$</p>
<p>Let&rsquo;s implement the Hamiltonian construction:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span><span class="lnt" id="hl-3-23"><a class="lnlinks" href="#hl-3-23">23</a>
</span><span class="lnt" id="hl-3-24"><a class="lnlinks" href="#hl-3-24">24</a>
</span><span class="lnt" id="hl-3-25"><a class="lnlinks" href="#hl-3-25">25</a>
</span><span class="lnt" id="hl-3-26"><a class="lnlinks" href="#hl-3-26">26</a>
</span><span class="lnt" id="hl-3-27"><a class="lnlinks" href="#hl-3-27">27</a>
</span><span class="lnt" id="hl-3-28"><a class="lnlinks" href="#hl-3-28">28</a>
</span><span class="lnt" id="hl-3-29"><a class="lnlinks" href="#hl-3-29">29</a>
</span><span class="lnt" id="hl-3-30"><a class="lnlinks" href="#hl-3-30">30</a>
</span><span class="lnt" id="hl-3-31"><a class="lnlinks" href="#hl-3-31">31</a>
</span><span class="lnt" id="hl-3-32"><a class="lnlinks" href="#hl-3-32">32</a>
</span><span class="lnt" id="hl-3-33"><a class="lnlinks" href="#hl-3-33">33</a>
</span><span class="lnt" id="hl-3-34"><a class="lnlinks" href="#hl-3-34">34</a>
</span><span class="lnt" id="hl-3-35"><a class="lnlinks" href="#hl-3-35">35</a>
</span><span class="lnt" id="hl-3-36"><a class="lnlinks" href="#hl-3-36">36</a>
</span><span class="lnt" id="hl-3-37"><a class="lnlinks" href="#hl-3-37">37</a>
</span><span class="lnt" id="hl-3-38"><a class="lnlinks" href="#hl-3-38">38</a>
</span><span class="lnt" id="hl-3-39"><a class="lnlinks" href="#hl-3-39">39</a>
</span><span class="lnt" id="hl-3-40"><a class="lnlinks" href="#hl-3-40">40</a>
</span><span class="lnt" id="hl-3-41"><a class="lnlinks" href="#hl-3-41">41</a>
</span><span class="lnt" id="hl-3-42"><a class="lnlinks" href="#hl-3-42">42</a>
</span><span class="lnt" id="hl-3-43"><a class="lnlinks" href="#hl-3-43">43</a>
</span><span class="lnt" id="hl-3-44"><a class="lnlinks" href="#hl-3-44">44</a>
</span><span class="lnt" id="hl-3-45"><a class="lnlinks" href="#hl-3-45">45</a>
</span><span class="lnt" id="hl-3-46"><a class="lnlinks" href="#hl-3-46">46</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">kinetic_energy_matrix</span><span class="p">(</span><span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">L</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Construct the kinetic energy matrix for a particle in a box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions.
</span></span></span><span class="line"><span class="cl"><span class="s2">        L (float): Length of the box.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Kinetic energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_basis_functions</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">L</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">T</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">potential_energy_matrix</span><span class="p">(</span><span class="n">basis_set</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Construct the potential energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        basis_set (np.ndarray): Set of basis functions evaluated at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        v_eff (np.ndarray): Effective potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Potential energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">basis_set</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">basis_set</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">basis_set</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">basis_set</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">            <span class="n">V</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">basis_set</span><span class="p">[:,</span> <span class="n">m</span><span class="p">]</span> <span class="o">*</span> <span class="n">v_eff</span> <span class="o">*</span> <span class="n">basis_set</span><span class="p">[:,</span> <span class="n">n</span><span class="p">],</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">V</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">construct_hamiltonian</span><span class="p">(</span><span class="n">T</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">V</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Construct the Hamiltonian matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        T (np.ndarray): Kinetic energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">        V (np.ndarray): Potential energy matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Hamiltonian matrix.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">T</span> <span class="o">+</span> <span class="n">V</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="density-calculation">Density Calculation</h2>
<p>The electron density is a crucial quantity in DFT. For our 1D system, we can calculate it as:</p>
<p>$$
n(x) = \sum_i |\phi_i(x)|^2
$$</p>
<p>where $\phi_i(x)$ are the Kohn-Sham orbitals. In our basis set representation, we can express this as:</p>
<p>$$
n(x) = \sum_i \left|\sum_n c_{in} \chi_n(x)\right|^2
$$</p>
<p>where $c_{in}$ are the expansion coefficients of the Kohn-Sham orbitals in our basis.</p>
<p>Let&rsquo;s implement the density calculation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_density</span><span class="p">(</span><span class="n">coefficients</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">basis_set</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the electron density.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        coefficients (np.ndarray): Expansion coefficients of the Kohn-Sham orbitals.
</span></span></span><span class="line"><span class="cl"><span class="s2">        basis_set (np.ndarray): Set of basis functions evaluated at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_electrons (int): Number of electrons in the system.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">occupied_orbitals</span> <span class="o">=</span> <span class="n">coefficients</span><span class="p">[:,</span> <span class="p">:</span><span class="n">num_electrons</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">density</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">basis_set</span> <span class="o">@</span> <span class="n">occupied_orbitals</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">density</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="potential-calculation">Potential Calculation</h2>
<p>The effective potential in DFT consists of three terms: the external potential, the Hartree potential, and the exchange-correlation potential. For our 1D system, we&rsquo;ll use a simple external potential (e.g., a harmonic oscillator potential) and a local density approximation (LDA) for the exchange-correlation potential.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1"> 1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2"> 2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3"> 3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4"> 4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5"> 5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6"> 6</a>
</span><span class="lnt" id="hl-5-7"><a class="lnlinks" href="#hl-5-7"> 7</a>
</span><span class="lnt" id="hl-5-8"><a class="lnlinks" href="#hl-5-8"> 8</a>
</span><span class="lnt" id="hl-5-9"><a class="lnlinks" href="#hl-5-9"> 9</a>
</span><span class="lnt" id="hl-5-10"><a class="lnlinks" href="#hl-5-10">10</a>
</span><span class="lnt" id="hl-5-11"><a class="lnlinks" href="#hl-5-11">11</a>
</span><span class="lnt" id="hl-5-12"><a class="lnlinks" href="#hl-5-12">12</a>
</span><span class="lnt" id="hl-5-13"><a class="lnlinks" href="#hl-5-13">13</a>
</span><span class="lnt" id="hl-5-14"><a class="lnlinks" href="#hl-5-14">14</a>
</span><span class="lnt" id="hl-5-15"><a class="lnlinks" href="#hl-5-15">15</a>
</span><span class="lnt" id="hl-5-16"><a class="lnlinks" href="#hl-5-16">16</a>
</span><span class="lnt" id="hl-5-17"><a class="lnlinks" href="#hl-5-17">17</a>
</span><span class="lnt" id="hl-5-18"><a class="lnlinks" href="#hl-5-18">18</a>
</span><span class="lnt" id="hl-5-19"><a class="lnlinks" href="#hl-5-19">19</a>
</span><span class="lnt" id="hl-5-20"><a class="lnlinks" href="#hl-5-20">20</a>
</span><span class="lnt" id="hl-5-21"><a class="lnlinks" href="#hl-5-21">21</a>
</span><span class="lnt" id="hl-5-22"><a class="lnlinks" href="#hl-5-22">22</a>
</span><span class="lnt" id="hl-5-23"><a class="lnlinks" href="#hl-5-23">23</a>
</span><span class="lnt" id="hl-5-24"><a class="lnlinks" href="#hl-5-24">24</a>
</span><span class="lnt" id="hl-5-25"><a class="lnlinks" href="#hl-5-25">25</a>
</span><span class="lnt" id="hl-5-26"><a class="lnlinks" href="#hl-5-26">26</a>
</span><span class="lnt" id="hl-5-27"><a class="lnlinks" href="#hl-5-27">27</a>
</span><span class="lnt" id="hl-5-28"><a class="lnlinks" href="#hl-5-28">28</a>
</span><span class="lnt" id="hl-5-29"><a class="lnlinks" href="#hl-5-29">29</a>
</span><span class="lnt" id="hl-5-30"><a class="lnlinks" href="#hl-5-30">30</a>
</span><span class="lnt" id="hl-5-31"><a class="lnlinks" href="#hl-5-31">31</a>
</span><span class="lnt" id="hl-5-32"><a class="lnlinks" href="#hl-5-32">32</a>
</span><span class="lnt" id="hl-5-33"><a class="lnlinks" href="#hl-5-33">33</a>
</span><span class="lnt" id="hl-5-34"><a class="lnlinks" href="#hl-5-34">34</a>
</span><span class="lnt" id="hl-5-35"><a class="lnlinks" href="#hl-5-35">35</a>
</span><span class="lnt" id="hl-5-36"><a class="lnlinks" href="#hl-5-36">36</a>
</span><span class="lnt" id="hl-5-37"><a class="lnlinks" href="#hl-5-37">37</a>
</span><span class="lnt" id="hl-5-38"><a class="lnlinks" href="#hl-5-38">38</a>
</span><span class="lnt" id="hl-5-39"><a class="lnlinks" href="#hl-5-39">39</a>
</span><span class="lnt" id="hl-5-40"><a class="lnlinks" href="#hl-5-40">40</a>
</span><span class="lnt" id="hl-5-41"><a class="lnlinks" href="#hl-5-41">41</a>
</span><span class="lnt" id="hl-5-42"><a class="lnlinks" href="#hl-5-42">42</a>
</span><span class="lnt" id="hl-5-43"><a class="lnlinks" href="#hl-5-43">43</a>
</span><span class="lnt" id="hl-5-44"><a class="lnlinks" href="#hl-5-44">44</a>
</span><span class="lnt" id="hl-5-45"><a class="lnlinks" href="#hl-5-45">45</a>
</span><span class="lnt" id="hl-5-46"><a class="lnlinks" href="#hl-5-46">46</a>
</span><span class="lnt" id="hl-5-47"><a class="lnlinks" href="#hl-5-47">47</a>
</span><span class="lnt" id="hl-5-48"><a class="lnlinks" href="#hl-5-48">48</a>
</span><span class="lnt" id="hl-5-49"><a class="lnlinks" href="#hl-5-49">49</a>
</span><span class="lnt" id="hl-5-50"><a class="lnlinks" href="#hl-5-50">50</a>
</span><span class="lnt" id="hl-5-51"><a class="lnlinks" href="#hl-5-51">51</a>
</span><span class="lnt" id="hl-5-52"><a class="lnlinks" href="#hl-5-52">52</a>
</span><span class="lnt" id="hl-5-53"><a class="lnlinks" href="#hl-5-53">53</a>
</span><span class="lnt" id="hl-5-54"><a class="lnlinks" href="#hl-5-54">54</a>
</span><span class="lnt" id="hl-5-55"><a class="lnlinks" href="#hl-5-55">55</a>
</span><span class="lnt" id="hl-5-56"><a class="lnlinks" href="#hl-5-56">56</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">external_potential</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the external potential (harmonic oscillator).
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        k (float, optional): Spring constant. Defaults to 1.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: External potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">k</span> <span class="o">*</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hartree_potential</span><span class="p">(</span><span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the Hartree potential by solving Poisson&#39;s equation.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Hartree potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_H</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">density</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">v_H</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v_H</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">exchange_correlation_potential_lda</span><span class="p">(</span><span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the exchange-correlation potential using Local Density Approximation (LDA).
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Exchange-correlation potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="p">((</span><span class="mi">3</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span> <span class="o">*</span> <span class="n">density</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the effective potential for the Kohn-Sham equations.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: Effective potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_ext</span> <span class="o">=</span> <span class="n">external_potential</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_H</span> <span class="o">=</span> <span class="n">hartree_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_xc</span> <span class="o">=</span> <span class="n">exchange_correlation_potential_lda</span><span class="p">(</span><span class="n">density</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v_ext</span> <span class="o">+</span> <span class="n">v_H</span> <span class="o">+</span> <span class="n">v_xc</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="self-consistent-field-loop">Self-Consistent Field Loop</h2>
<p>The heart of the DFT calculation is the self-consistent field (SCF) loop. We start with an initial guess for the density, calculate the effective potential, solve the Kohn-Sham equations, and then calculate a new density. We repeat this process until the density (or energy) converges.</p>
<p>Here&rsquo;s the implementation of the SCF loop:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1"> 1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2"> 2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3"> 3</a>
</span><span class="lnt" id="hl-6-4"><a class="lnlinks" href="#hl-6-4"> 4</a>
</span><span class="lnt" id="hl-6-5"><a class="lnlinks" href="#hl-6-5"> 5</a>
</span><span class="lnt" id="hl-6-6"><a class="lnlinks" href="#hl-6-6"> 6</a>
</span><span class="lnt" id="hl-6-7"><a class="lnlinks" href="#hl-6-7"> 7</a>
</span><span class="lnt" id="hl-6-8"><a class="lnlinks" href="#hl-6-8"> 8</a>
</span><span class="lnt" id="hl-6-9"><a class="lnlinks" href="#hl-6-9"> 9</a>
</span><span class="lnt" id="hl-6-10"><a class="lnlinks" href="#hl-6-10">10</a>
</span><span class="lnt" id="hl-6-11"><a class="lnlinks" href="#hl-6-11">11</a>
</span><span class="lnt" id="hl-6-12"><a class="lnlinks" href="#hl-6-12">12</a>
</span><span class="lnt" id="hl-6-13"><a class="lnlinks" href="#hl-6-13">13</a>
</span><span class="lnt" id="hl-6-14"><a class="lnlinks" href="#hl-6-14">14</a>
</span><span class="lnt" id="hl-6-15"><a class="lnlinks" href="#hl-6-15">15</a>
</span><span class="lnt" id="hl-6-16"><a class="lnlinks" href="#hl-6-16">16</a>
</span><span class="lnt" id="hl-6-17"><a class="lnlinks" href="#hl-6-17">17</a>
</span><span class="lnt" id="hl-6-18"><a class="lnlinks" href="#hl-6-18">18</a>
</span><span class="lnt" id="hl-6-19"><a class="lnlinks" href="#hl-6-19">19</a>
</span><span class="lnt" id="hl-6-20"><a class="lnlinks" href="#hl-6-20">20</a>
</span><span class="lnt" id="hl-6-21"><a class="lnlinks" href="#hl-6-21">21</a>
</span><span class="lnt" id="hl-6-22"><a class="lnlinks" href="#hl-6-22">22</a>
</span><span class="lnt" id="hl-6-23"><a class="lnlinks" href="#hl-6-23">23</a>
</span><span class="lnt" id="hl-6-24"><a class="lnlinks" href="#hl-6-24">24</a>
</span><span class="lnt" id="hl-6-25"><a class="lnlinks" href="#hl-6-25">25</a>
</span><span class="lnt" id="hl-6-26"><a class="lnlinks" href="#hl-6-26">26</a>
</span><span class="lnt" id="hl-6-27"><a class="lnlinks" href="#hl-6-27">27</a>
</span><span class="lnt" id="hl-6-28"><a class="lnlinks" href="#hl-6-28">28</a>
</span><span class="lnt" id="hl-6-29"><a class="lnlinks" href="#hl-6-29">29</a>
</span><span class="lnt" id="hl-6-30"><a class="lnlinks" href="#hl-6-30">30</a>
</span><span class="lnt" id="hl-6-31"><a class="lnlinks" href="#hl-6-31">31</a>
</span><span class="lnt" id="hl-6-32"><a class="lnlinks" href="#hl-6-32">32</a>
</span><span class="lnt" id="hl-6-33"><a class="lnlinks" href="#hl-6-33">33</a>
</span><span class="lnt" id="hl-6-34"><a class="lnlinks" href="#hl-6-34">34</a>
</span><span class="lnt" id="hl-6-35"><a class="lnlinks" href="#hl-6-35">35</a>
</span><span class="lnt" id="hl-6-36"><a class="lnlinks" href="#hl-6-36">36</a>
</span><span class="lnt" id="hl-6-37"><a class="lnlinks" href="#hl-6-37">37</a>
</span><span class="lnt" id="hl-6-38"><a class="lnlinks" href="#hl-6-38">38</a>
</span><span class="lnt" id="hl-6-39"><a class="lnlinks" href="#hl-6-39">39</a>
</span><span class="lnt" id="hl-6-40"><a class="lnlinks" href="#hl-6-40">40</a>
</span><span class="lnt" id="hl-6-41"><a class="lnlinks" href="#hl-6-41">41</a>
</span><span class="lnt" id="hl-6-42"><a class="lnlinks" href="#hl-6-42">42</a>
</span><span class="lnt" id="hl-6-43"><a class="lnlinks" href="#hl-6-43">43</a>
</span><span class="lnt" id="hl-6-44"><a class="lnlinks" href="#hl-6-44">44</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">scf_loop</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">             <span class="n">max_iterations</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">mixing_param</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">             <span class="n">convergence_threshold</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1e-6</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Perform the self-consistent field loop for DFT calculations.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_electrons (int): Number of electrons in the system.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions to use.
</span></span></span><span class="line"><span class="cl"><span class="s2">        max_iterations (int, optional): Maximum number of SCF iterations. Defaults to 100.
</span></span></span><span class="line"><span class="cl"><span class="s2">        mixing_param (float, optional): Mixing parameter for density update. Defaults to 0.5.
</span></span></span><span class="line"><span class="cl"><span class="s2">        convergence_threshold (float, optional): Convergence threshold for density. Defaults to 1e-6.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        tuple[np.ndarray, np.ndarray, np.ndarray]: Final density, eigenvalues, and eigenvectors.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">L</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">basis_set</span> <span class="o">=</span> <span class="n">create_basis_set</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">=</span> <span class="n">kinetic_energy_matrix</span><span class="p">(</span><span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Initial guess for density</span>
</span></span><span class="line"><span class="cl">    <span class="n">density</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">num_electrons</span> <span class="o">/</span> <span class="n">L</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">iteration</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iterations</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">v_eff</span> <span class="o">=</span> <span class="n">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">V</span> <span class="o">=</span> <span class="n">potential_energy_matrix</span><span class="p">(</span><span class="n">basis_set</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">H</span> <span class="o">=</span> <span class="n">construct_hamiltonian</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">V</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Solve the eigenvalue problem</span>
</span></span><span class="line"><span class="cl">        <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">linalg</span><span class="o">.</span><span class="n">eigh</span><span class="p">(</span><span class="n">H</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Calculate new density</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_density</span> <span class="o">=</span> <span class="n">calculate_density</span><span class="p">(</span><span class="n">eigenvectors</span><span class="p">,</span> <span class="n">basis_set</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Check for convergence</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">new_density</span> <span class="o">-</span> <span class="n">density</span><span class="p">))</span> <span class="o">&lt;</span> <span class="n">convergence_threshold</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Converged after </span><span class="si">{</span><span class="n">iteration</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s2"> iterations&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Mix old and new densities</span>
</span></span><span class="line"><span class="cl">        <span class="n">density</span> <span class="o">=</span> <span class="n">mixing_param</span> <span class="o">*</span> <span class="n">new_density</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">mixing_param</span><span class="p">)</span> <span class="o">*</span> <span class="n">density</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">density</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="putting-it-all-together">Putting It All Together</h2>
<p>Now that we have all the components, let&rsquo;s create a function to run the entire DFT calculation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1"> 1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2"> 2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3"> 3</a>
</span><span class="lnt" id="hl-7-4"><a class="lnlinks" href="#hl-7-4"> 4</a>
</span><span class="lnt" id="hl-7-5"><a class="lnlinks" href="#hl-7-5"> 5</a>
</span><span class="lnt" id="hl-7-6"><a class="lnlinks" href="#hl-7-6"> 6</a>
</span><span class="lnt" id="hl-7-7"><a class="lnlinks" href="#hl-7-7"> 7</a>
</span><span class="lnt" id="hl-7-8"><a class="lnlinks" href="#hl-7-8"> 8</a>
</span><span class="lnt" id="hl-7-9"><a class="lnlinks" href="#hl-7-9"> 9</a>
</span><span class="lnt" id="hl-7-10"><a class="lnlinks" href="#hl-7-10">10</a>
</span><span class="lnt" id="hl-7-11"><a class="lnlinks" href="#hl-7-11">11</a>
</span><span class="lnt" id="hl-7-12"><a class="lnlinks" href="#hl-7-12">12</a>
</span><span class="lnt" id="hl-7-13"><a class="lnlinks" href="#hl-7-13">13</a>
</span><span class="lnt" id="hl-7-14"><a class="lnlinks" href="#hl-7-14">14</a>
</span><span class="lnt" id="hl-7-15"><a class="lnlinks" href="#hl-7-15">15</a>
</span><span class="lnt" id="hl-7-16"><a class="lnlinks" href="#hl-7-16">16</a>
</span><span class="lnt" id="hl-7-17"><a class="lnlinks" href="#hl-7-17">17</a>
</span><span class="lnt" id="hl-7-18"><a class="lnlinks" href="#hl-7-18">18</a>
</span><span class="lnt" id="hl-7-19"><a class="lnlinks" href="#hl-7-19">19</a>
</span><span class="lnt" id="hl-7-20"><a class="lnlinks" href="#hl-7-20">20</a>
</span><span class="lnt" id="hl-7-21"><a class="lnlinks" href="#hl-7-21">21</a>
</span><span class="lnt" id="hl-7-22"><a class="lnlinks" href="#hl-7-22">22</a>
</span><span class="lnt" id="hl-7-23"><a class="lnlinks" href="#hl-7-23">23</a>
</span><span class="lnt" id="hl-7-24"><a class="lnlinks" href="#hl-7-24">24</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">run_dft_calculation</span><span class="p">(</span><span class="n">num_points</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Run a complete 1D DFT calculation.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_points (int, optional): Number of spatial grid points. Defaults to 1000.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_electrons (int, optional): Number of electrons in the system. Defaults to 2.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int, optional): Number of basis functions to use. Defaults to 10.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray]: 
</span></span></span><span class="line"><span class="cl"><span class="s2">            Spatial grid, final density, effective potential, eigenvalues, and eigenvectors.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">num_points</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">density</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">scf_loop</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">num_electrons</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Calculate final effective potential</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_eff</span> <span class="o">=</span> <span class="n">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run the calculation</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">run_dft_calculation</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="visualization">Visualization</h2>
<p>Finally, let&rsquo;s visualize our results:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-8-1"><a class="lnlinks" href="#hl-8-1"> 1</a>
</span><span class="lnt" id="hl-8-2"><a class="lnlinks" href="#hl-8-2"> 2</a>
</span><span class="lnt" id="hl-8-3"><a class="lnlinks" href="#hl-8-3"> 3</a>
</span><span class="lnt" id="hl-8-4"><a class="lnlinks" href="#hl-8-4"> 4</a>
</span><span class="lnt" id="hl-8-5"><a class="lnlinks" href="#hl-8-5"> 5</a>
</span><span class="lnt" id="hl-8-6"><a class="lnlinks" href="#hl-8-6"> 6</a>
</span><span class="lnt" id="hl-8-7"><a class="lnlinks" href="#hl-8-7"> 7</a>
</span><span class="lnt" id="hl-8-8"><a class="lnlinks" href="#hl-8-8"> 8</a>
</span><span class="lnt" id="hl-8-9"><a class="lnlinks" href="#hl-8-9"> 9</a>
</span><span class="lnt" id="hl-8-10"><a class="lnlinks" href="#hl-8-10">10</a>
</span><span class="lnt" id="hl-8-11"><a class="lnlinks" href="#hl-8-11">11</a>
</span><span class="lnt" id="hl-8-12"><a class="lnlinks" href="#hl-8-12">12</a>
</span><span class="lnt" id="hl-8-13"><a class="lnlinks" href="#hl-8-13">13</a>
</span><span class="lnt" id="hl-8-14"><a class="lnlinks" href="#hl-8-14">14</a>
</span><span class="lnt" id="hl-8-15"><a class="lnlinks" href="#hl-8-15">15</a>
</span><span class="lnt" id="hl-8-16"><a class="lnlinks" href="#hl-8-16">16</a>
</span><span class="lnt" id="hl-8-17"><a class="lnlinks" href="#hl-8-17">17</a>
</span><span class="lnt" id="hl-8-18"><a class="lnlinks" href="#hl-8-18">18</a>
</span><span class="lnt" id="hl-8-19"><a class="lnlinks" href="#hl-8-19">19</a>
</span><span class="lnt" id="hl-8-20"><a class="lnlinks" href="#hl-8-20">20</a>
</span><span class="lnt" id="hl-8-21"><a class="lnlinks" href="#hl-8-21">21</a>
</span><span class="lnt" id="hl-8-22"><a class="lnlinks" href="#hl-8-22">22</a>
</span><span class="lnt" id="hl-8-23"><a class="lnlinks" href="#hl-8-23">23</a>
</span><span class="lnt" id="hl-8-24"><a class="lnlinks" href="#hl-8-24">24</a>
</span><span class="lnt" id="hl-8-25"><a class="lnlinks" href="#hl-8-25">25</a>
</span><span class="lnt" id="hl-8-26"><a class="lnlinks" href="#hl-8-26">26</a>
</span><span class="lnt" id="hl-8-27"><a class="lnlinks" href="#hl-8-27">27</a>
</span><span class="lnt" id="hl-8-28"><a class="lnlinks" href="#hl-8-28">28</a>
</span><span class="lnt" id="hl-8-29"><a class="lnlinks" href="#hl-8-29">29</a>
</span><span class="lnt" id="hl-8-30"><a class="lnlinks" href="#hl-8-30">30</a>
</span><span class="lnt" id="hl-8-31"><a class="lnlinks" href="#hl-8-31">31</a>
</span><span class="lnt" id="hl-8-32"><a class="lnlinks" href="#hl-8-32">32</a>
</span><span class="lnt" id="hl-8-33"><a class="lnlinks" href="#hl-8-33">33</a>
</span><span class="lnt" id="hl-8-34"><a class="lnlinks" href="#hl-8-34">34</a>
</span><span class="lnt" id="hl-8-35"><a class="lnlinks" href="#hl-8-35">35</a>
</span><span class="lnt" id="hl-8-36"><a class="lnlinks" href="#hl-8-36">36</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">visualize_results</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                      <span class="n">eigenvectors</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Visualize the results of the DFT calculation.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        v_eff (np.ndarray): Effective potential at grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        eigenvectors (np.ndarray): Eigenvectors (Kohn-Sham orbitals).
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions used.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Electron density&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Effective potential&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;1D DFT Results&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Density / Potential&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">basis_set</span> <span class="o">=</span> <span class="n">create_basis_set</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>  <span class="c1"># Plot first 3 orbitals</span>
</span></span><span class="line"><span class="cl">        <span class="n">orbital</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">eigenvectors</span><span class="p">[:,</span> <span class="n">i</span><span class="p">][</span><span class="kc">None</span><span class="p">,</span> <span class="p">:]</span> <span class="o">*</span> <span class="n">basis_set</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">orbital</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">f</span><span class="s1">&#39;Orbital </span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Position&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Orbital amplitude&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Visualize the results</span>
</span></span><span class="line"><span class="cl"><span class="c1"># visualize_results(x, density, v_eff, eigenvectors, num_basis_functions=10)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This visualization function creates a figure with two subplots:</p>
<ol>
<li>The first subplot shows the electron density and the effective potential.</li>
<li>The second subplot displays the first three Kohn-Sham orbitals.</li>
<li></li>
</ol>
<h2 id="modeling-h-with-1d-dft">Modeling H₂ with 1D DFT</h2>
<p>While our 1D DFT code is a simplification, we can adapt it to model a simple diatomic molecule like H₂. Here&rsquo;s how we could approach this:</p>
<h3 id="adapting-the-external-potential">Adapting the External Potential</h3>
<p>Instead of a harmonic oscillator potential, we need to represent two protons at fixed positions. In 1D, we can model this as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-9-1"><a class="lnlinks" href="#hl-9-1"> 1</a>
</span><span class="lnt" id="hl-9-2"><a class="lnlinks" href="#hl-9-2"> 2</a>
</span><span class="lnt" id="hl-9-3"><a class="lnlinks" href="#hl-9-3"> 3</a>
</span><span class="lnt" id="hl-9-4"><a class="lnlinks" href="#hl-9-4"> 4</a>
</span><span class="lnt" id="hl-9-5"><a class="lnlinks" href="#hl-9-5"> 5</a>
</span><span class="lnt" id="hl-9-6"><a class="lnlinks" href="#hl-9-6"> 6</a>
</span><span class="lnt" id="hl-9-7"><a class="lnlinks" href="#hl-9-7"> 7</a>
</span><span class="lnt" id="hl-9-8"><a class="lnlinks" href="#hl-9-8"> 8</a>
</span><span class="lnt" id="hl-9-9"><a class="lnlinks" href="#hl-9-9"> 9</a>
</span><span class="lnt" id="hl-9-10"><a class="lnlinks" href="#hl-9-10">10</a>
</span><span class="lnt" id="hl-9-11"><a class="lnlinks" href="#hl-9-11">11</a>
</span><span class="lnt" id="hl-9-12"><a class="lnlinks" href="#hl-9-12">12</a>
</span><span class="lnt" id="hl-9-13"><a class="lnlinks" href="#hl-9-13">13</a>
</span><span class="lnt" id="hl-9-14"><a class="lnlinks" href="#hl-9-14">14</a>
</span><span class="lnt" id="hl-9-15"><a class="lnlinks" href="#hl-9-15">15</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">external_potential_H2</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">R</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    External potential for H₂ molecule in 1D.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        R (float): Distance between nuclei.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        np.ndarray: External potential at each grid point.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">center</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="mf">1e-5</span>  <span class="c1"># to avoid numeric issues</span>
</span></span><span class="line"><span class="cl">    <span class="n">v_ext</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">center</span> <span class="o">-</span> <span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">a</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">center</span> <span class="o">+</span> <span class="n">R</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v_ext</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here, <code>R</code> is the distance between the nuclei, and <code>a</code> is a small positive number to avoid division by zero. The potential is centered in our box.</p>
<h3 id="adjusting-the-number-of-electrons">Adjusting the Number of Electrons</h3>
<p>H₂ has two electrons, so we set <code>num_electrons = 2</code> in our <code>run_dft_calculation</code> function.</p>
<h3 id="calculating-the-total-energy">Calculating the Total Energy</h3>
<p>To find the equilibrium bond length, we need to calculate the total energy, including the nuclear repulsion:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-10-1"><a class="lnlinks" href="#hl-10-1"> 1</a>
</span><span class="lnt" id="hl-10-2"><a class="lnlinks" href="#hl-10-2"> 2</a>
</span><span class="lnt" id="hl-10-3"><a class="lnlinks" href="#hl-10-3"> 3</a>
</span><span class="lnt" id="hl-10-4"><a class="lnlinks" href="#hl-10-4"> 4</a>
</span><span class="lnt" id="hl-10-5"><a class="lnlinks" href="#hl-10-5"> 5</a>
</span><span class="lnt" id="hl-10-6"><a class="lnlinks" href="#hl-10-6"> 6</a>
</span><span class="lnt" id="hl-10-7"><a class="lnlinks" href="#hl-10-7"> 7</a>
</span><span class="lnt" id="hl-10-8"><a class="lnlinks" href="#hl-10-8"> 8</a>
</span><span class="lnt" id="hl-10-9"><a class="lnlinks" href="#hl-10-9"> 9</a>
</span><span class="lnt" id="hl-10-10"><a class="lnlinks" href="#hl-10-10">10</a>
</span><span class="lnt" id="hl-10-11"><a class="lnlinks" href="#hl-10-11">11</a>
</span><span class="lnt" id="hl-10-12"><a class="lnlinks" href="#hl-10-12">12</a>
</span><span class="lnt" id="hl-10-13"><a class="lnlinks" href="#hl-10-13">13</a>
</span><span class="lnt" id="hl-10-14"><a class="lnlinks" href="#hl-10-14">14</a>
</span><span class="lnt" id="hl-10-15"><a class="lnlinks" href="#hl-10-15">15</a>
</span><span class="lnt" id="hl-10-16"><a class="lnlinks" href="#hl-10-16">16</a>
</span><span class="lnt" id="hl-10-17"><a class="lnlinks" href="#hl-10-17">17</a>
</span><span class="lnt" id="hl-10-18"><a class="lnlinks" href="#hl-10-18">18</a>
</span><span class="lnt" id="hl-10-19"><a class="lnlinks" href="#hl-10-19">19</a>
</span><span class="lnt" id="hl-10-20"><a class="lnlinks" href="#hl-10-20">20</a>
</span><span class="lnt" id="hl-10-21"><a class="lnlinks" href="#hl-10-21">21</a>
</span><span class="lnt" id="hl-10-22"><a class="lnlinks" href="#hl-10-22">22</a>
</span><span class="lnt" id="hl-10-23"><a class="lnlinks" href="#hl-10-23">23</a>
</span><span class="lnt" id="hl-10-24"><a class="lnlinks" href="#hl-10-24">24</a>
</span><span class="lnt" id="hl-10-25"><a class="lnlinks" href="#hl-10-25">25</a>
</span><span class="lnt" id="hl-10-26"><a class="lnlinks" href="#hl-10-26">26</a>
</span><span class="lnt" id="hl-10-27"><a class="lnlinks" href="#hl-10-27">27</a>
</span><span class="lnt" id="hl-10-28"><a class="lnlinks" href="#hl-10-28">28</a>
</span><span class="lnt" id="hl-10-29"><a class="lnlinks" href="#hl-10-29">29</a>
</span><span class="lnt" id="hl-10-30"><a class="lnlinks" href="#hl-10-30">30</a>
</span><span class="lnt" id="hl-10-31"><a class="lnlinks" href="#hl-10-31">31</a>
</span><span class="lnt" id="hl-10-32"><a class="lnlinks" href="#hl-10-32">32</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">calculate_total_energy</span><span class="p">(</span><span class="n">density</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">v_ext</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                           <span class="n">eigenvalues</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">R</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Calculate the total energy of the H₂ system.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        density (np.ndarray): Electron density.
</span></span></span><span class="line"><span class="cl"><span class="s2">        v_ext (np.ndarray): External potential.
</span></span></span><span class="line"><span class="cl"><span class="s2">        v_eff (np.ndarray): Effective potential.
</span></span></span><span class="line"><span class="cl"><span class="s2">        eigenvalues (np.ndarray): Kohn-Sham orbital energies.
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        R (float): Distance between nuclei.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        float: Total energy of the system.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Kinetic energy</span>
</span></span><span class="line"><span class="cl">    <span class="n">T_s</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">eigenvalues</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>  <span class="c1"># Sum of occupied orbital energies</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Electron-nuclear attraction</span>
</span></span><span class="line"><span class="cl">    <span class="n">E_en</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">density</span> <span class="o">*</span> <span class="n">v_ext</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Hartree energy</span>
</span></span><span class="line"><span class="cl">    <span class="n">E_H</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">density</span> <span class="o">*</span> <span class="p">(</span><span class="n">v_eff</span> <span class="o">-</span> <span class="n">v_ext</span> <span class="o">-</span> <span class="n">exchange_correlation_potential_lda</span><span class="p">(</span><span class="n">density</span><span class="p">)),</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Exchange-correlation energy</span>
</span></span><span class="line"><span class="cl">    <span class="n">E_xc</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">trapz</span><span class="p">(</span><span class="n">density</span> <span class="o">*</span> <span class="n">exchange_correlation_potential_lda</span><span class="p">(</span><span class="n">density</span><span class="p">),</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Nuclear repulsion</span>
</span></span><span class="line"><span class="cl">    <span class="n">E_nn</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">R</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">T_s</span> <span class="o">+</span> <span class="n">E_en</span> <span class="o">+</span> <span class="n">E_H</span> <span class="o">+</span> <span class="n">E_xc</span> <span class="o">+</span> <span class="n">E_nn</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="finding-the-equilibrium-bond-length">Finding the Equilibrium Bond Length</h3>
<p>We can find the equilibrium bond length by running our DFT calculation for different R values and finding the minimum energy:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-11-1"><a class="lnlinks" href="#hl-11-1"> 1</a>
</span><span class="lnt" id="hl-11-2"><a class="lnlinks" href="#hl-11-2"> 2</a>
</span><span class="lnt" id="hl-11-3"><a class="lnlinks" href="#hl-11-3"> 3</a>
</span><span class="lnt" id="hl-11-4"><a class="lnlinks" href="#hl-11-4"> 4</a>
</span><span class="lnt" id="hl-11-5"><a class="lnlinks" href="#hl-11-5"> 5</a>
</span><span class="lnt" id="hl-11-6"><a class="lnlinks" href="#hl-11-6"> 6</a>
</span><span class="lnt" id="hl-11-7"><a class="lnlinks" href="#hl-11-7"> 7</a>
</span><span class="lnt" id="hl-11-8"><a class="lnlinks" href="#hl-11-8"> 8</a>
</span><span class="lnt" id="hl-11-9"><a class="lnlinks" href="#hl-11-9"> 9</a>
</span><span class="lnt" id="hl-11-10"><a class="lnlinks" href="#hl-11-10">10</a>
</span><span class="lnt" id="hl-11-11"><a class="lnlinks" href="#hl-11-11">11</a>
</span><span class="lnt" id="hl-11-12"><a class="lnlinks" href="#hl-11-12">12</a>
</span><span class="lnt" id="hl-11-13"><a class="lnlinks" href="#hl-11-13">13</a>
</span><span class="lnt" id="hl-11-14"><a class="lnlinks" href="#hl-11-14">14</a>
</span><span class="lnt" id="hl-11-15"><a class="lnlinks" href="#hl-11-15">15</a>
</span><span class="lnt" id="hl-11-16"><a class="lnlinks" href="#hl-11-16">16</a>
</span><span class="lnt" id="hl-11-17"><a class="lnlinks" href="#hl-11-17">17</a>
</span><span class="lnt" id="hl-11-18"><a class="lnlinks" href="#hl-11-18">18</a>
</span><span class="lnt" id="hl-11-19"><a class="lnlinks" href="#hl-11-19">19</a>
</span><span class="lnt" id="hl-11-20"><a class="lnlinks" href="#hl-11-20">20</a>
</span><span class="lnt" id="hl-11-21"><a class="lnlinks" href="#hl-11-21">21</a>
</span><span class="lnt" id="hl-11-22"><a class="lnlinks" href="#hl-11-22">22</a>
</span><span class="lnt" id="hl-11-23"><a class="lnlinks" href="#hl-11-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">find_equilibrium_bond_length</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Find the equilibrium bond length for H₂.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        x (np.ndarray): Spatial grid points.
</span></span></span><span class="line"><span class="cl"><span class="s2">        num_basis_functions (int): Number of basis functions to use.
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        float: Equilibrium bond length.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">R_values</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>  <span class="c1"># in atomic units</span>
</span></span><span class="line"><span class="cl">    <span class="n">energies</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">R</span> <span class="ow">in</span> <span class="n">R_values</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">v_ext</span> <span class="o">=</span> <span class="n">external_potential_H2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">density</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">scf_loop</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">v_ext</span><span class="o">=</span><span class="n">v_ext</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">v_eff</span> <span class="o">=</span> <span class="n">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">energy</span> <span class="o">=</span> <span class="n">calculate_total_energy</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">v_ext</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">energies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">energy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">equilibrium_R</span> <span class="o">=</span> <span class="n">R_values</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">argmin</span><span class="p">(</span><span class="n">energies</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">equilibrium_R</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="running-the-calculation">Running the Calculation</h3>
<p>Finally, we can run our calculation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-12-1"><a class="lnlinks" href="#hl-12-1"> 1</a>
</span><span class="lnt" id="hl-12-2"><a class="lnlinks" href="#hl-12-2"> 2</a>
</span><span class="lnt" id="hl-12-3"><a class="lnlinks" href="#hl-12-3"> 3</a>
</span><span class="lnt" id="hl-12-4"><a class="lnlinks" href="#hl-12-4"> 4</a>
</span><span class="lnt" id="hl-12-5"><a class="lnlinks" href="#hl-12-5"> 5</a>
</span><span class="lnt" id="hl-12-6"><a class="lnlinks" href="#hl-12-6"> 6</a>
</span><span class="lnt" id="hl-12-7"><a class="lnlinks" href="#hl-12-7"> 7</a>
</span><span class="lnt" id="hl-12-8"><a class="lnlinks" href="#hl-12-8"> 8</a>
</span><span class="lnt" id="hl-12-9"><a class="lnlinks" href="#hl-12-9"> 9</a>
</span><span class="lnt" id="hl-12-10"><a class="lnlinks" href="#hl-12-10">10</a>
</span><span class="lnt" id="hl-12-11"><a class="lnlinks" href="#hl-12-11">11</a>
</span><span class="lnt" id="hl-12-12"><a class="lnlinks" href="#hl-12-12">12</a>
</span><span class="lnt" id="hl-12-13"><a class="lnlinks" href="#hl-12-13">13</a>
</span><span class="lnt" id="hl-12-14"><a class="lnlinks" href="#hl-12-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">num_basis_functions</span> <span class="o">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="n">equilibrium_R</span> <span class="o">=</span> <span class="n">find_equilibrium_bond_length</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Equilibrium bond length: </span><span class="si">{</span><span class="n">equilibrium_R</span><span class="si">:</span><span class="s2">.3f</span><span class="si">}</span><span class="s2"> atomic units&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run DFT at equilibrium bond length</span>
</span></span><span class="line"><span class="cl"><span class="n">v_ext</span> <span class="o">=</span> <span class="n">external_potential_H2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">equilibrium_R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">density</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">eigenvectors</span> <span class="o">=</span> <span class="n">scf_loop</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">,</span> <span class="n">v_ext</span><span class="o">=</span><span class="n">v_ext</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">v_eff</span> <span class="o">=</span> <span class="n">calculate_effective_potential</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">energy</span> <span class="o">=</span> <span class="n">calculate_total_energy</span><span class="p">(</span><span class="n">density</span><span class="p">,</span> <span class="n">v_ext</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvalues</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">equilibrium_R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Total energy at equilibrium: </span><span class="si">{</span><span class="n">energy</span><span class="si">:</span><span class="s2">.6f</span><span class="si">}</span><span class="s2"> atomic units&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Visualize results</span>
</span></span><span class="line"><span class="cl"><span class="n">visualize_results</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span> <span class="n">v_eff</span><span class="p">,</span> <span class="n">eigenvectors</span><span class="p">,</span> <span class="n">num_basis_functions</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="conclusion">Conclusion</h3>
<p>In this blog post, we&rsquo;ve implemented a basic 1D Density Functional Theory code in Python. We&rsquo;ve covered the key components of DFT, including:</p>
<ol>
<li>Basis set definition using particle-in-a-box eigenfunctions</li>
<li>Hamiltonian construction with kinetic and potential energy terms</li>
<li>Density calculation from Kohn-Sham orbitals</li>
<li>Effective potential calculation, including external, Hartree, and exchange-correlation potentials</li>
<li>Self-consistent field loop for iterative solution of the Kohn-Sham equations</li>
<li>Visualization of results</li>
</ol>
<p>This implementation serves as a starting point for understanding DFT calculations. In real-world applications, more sophisticated basis sets, exchange-correlation functionals, and numerical techniques would be used to handle more complex systems and achieve better accuracy and efficiency.</p>
<p>Some potential improvements and extensions to this code could include:</p>
<ol>
<li>Implementing more advanced exchange-correlation functionals (e.g., GGA)</li>
<li>Adding support for different external potentials</li>
<li>Improving the efficiency of the SCF loop (e.g., using DIIS convergence acceleration)</li>
<li>Calculating and visualizing additional properties (e.g., total energy, HOMO-LUMO gap)</li>
<li>Extending the code to handle multiple non-interacting particles</li>
</ol>
<p>By working through this implementation, you&rsquo;ve gained insight into the fundamental principles of DFT and how they can be translated into code. This knowledge forms a solid foundation for understanding more complex DFT implementations and their applications in computational chemistry and materials science.</p>
<h2 id="further-reading">Further Reading</h2>
<p>To deepen your understanding of DFT and its applications, you might want to explore the following resources:</p>
<ol>
<li>&ldquo;Density Functional Theory: A Practical Introduction&rdquo; by David Sholl and Janice A. Steckel</li>
<li>&ldquo;Electronic Structure: Basic Theory and Practical Methods&rdquo; by Richard M. Martin</li>
<li>&ldquo;A Bird&rsquo;s-Eye View of Density-Functional Theory&rdquo; by Kieron Burke and Lucas O. Wagner (<a href="https://arxiv.org/abs/1308.5164">https://arxiv.org/abs/1308.5164</a>)</li>
<li>The Psi4NumPy project, which includes educational implementations of various quantum chemistry methods: <a href="https://github.com/psi4/psi4numpy">https://github.com/psi4/psi4numpy</a></li>
</ol>
<p>In the next blog post, we&rsquo;ll extend this code to handle 2D systems, introducing new challenges and opportunities for visualization and analysis of quantum systems.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
